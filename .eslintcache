[{"C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\index.js":"1","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\reportWebVitals.js":"2","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\App.js":"3","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\AppContext.js":"4","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\ProtectedCondRoute.js":"5","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\ProtectedRoute.js":"6","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Navbar\\Navbar.js":"7","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Home\\Home.js":"8","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Register\\RegisterForm.js":"9","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Login\\LoginForm.js":"10","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\MainPage\\MainPage.js":"11","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Jobs\\jobPostsList.js":"12","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\UserProfile\\ProfileUser.js":"13","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\RecruiterProfile\\ProfileRecruiter.js":"14","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\services\\authService.js":"15","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Navbar\\MenuItems.js":"16","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\helpers\\httpInstance.js":"17","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\UserProfile\\Education\\DeleteEducationControl.js":"18","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\UserProfile\\Education\\Education.js":"19","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\UserProfile\\Experiences\\DeleteExperienceControl.js":"20","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\UserProfile\\Experiences\\Experience.js":"21","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\ContactForm\\ContactForm.js":"22","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\RecruiterProfile\\JobPost\\JobPost.js":"23","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Apply\\Apply.js":"24","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\SearchBar\\SearchBar.js":"25","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\ContactInfos\\ContactInfo.js":"26","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Loader.jsx":"27","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Register\\SetUserRole.js":"28","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Login\\ChangePassword.js":"29","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\UserProfile\\ChangePersonalInfos\\ChangePersonalInfos.js":"30"},{"size":520,"mtime":1643285738181,"results":"31","hashOfConfig":"32"},{"size":375,"mtime":1643285738185,"results":"33","hashOfConfig":"32"},{"size":2926,"mtime":1643285738050,"results":"34","hashOfConfig":"32"},{"size":557,"mtime":1643285738056,"results":"35","hashOfConfig":"32"},{"size":452,"mtime":1643285738059,"results":"36","hashOfConfig":"32"},{"size":603,"mtime":1643285738062,"results":"37","hashOfConfig":"32"},{"size":2749,"mtime":1643285738118,"results":"38","hashOfConfig":"32"},{"size":7027,"mtime":1643285738081,"results":"39","hashOfConfig":"32"},{"size":12724,"mtime":1643285738166,"results":"40","hashOfConfig":"32"},{"size":5254,"mtime":1643285738101,"results":"41","hashOfConfig":"32"},{"size":3805,"mtime":1643285738109,"results":"42","hashOfConfig":"32"},{"size":11837,"mtime":1643285738089,"results":"43","hashOfConfig":"32"},{"size":27017,"mtime":1643285738163,"results":"44","hashOfConfig":"32"},{"size":22211,"mtime":1643285738139,"results":"45","hashOfConfig":"32"},{"size":2289,"mtime":1643285738187,"results":"46","hashOfConfig":"32"},{"size":1075,"mtime":1643285738112,"results":"47","hashOfConfig":"32"},{"size":1235,"mtime":1643285738176,"results":"48","hashOfConfig":"32"},{"size":1344,"mtime":1643285738148,"results":"49","hashOfConfig":"32"},{"size":3993,"mtime":1643285738151,"results":"50","hashOfConfig":"32"},{"size":1354,"mtime":1643285738153,"results":"51","hashOfConfig":"32"},{"size":4485,"mtime":1643285738156,"results":"52","hashOfConfig":"32"},{"size":6641,"mtime":1643285738074,"results":"53","hashOfConfig":"32"},{"size":9276,"mtime":1643285738132,"results":"54","hashOfConfig":"32"},{"size":10963,"mtime":1643285738067,"results":"55","hashOfConfig":"32"},{"size":2586,"mtime":1643285738173,"results":"56","hashOfConfig":"32"},{"size":5402,"mtime":1643285738124,"results":"57","hashOfConfig":"32"},{"size":253,"mtime":1643285738094,"results":"58","hashOfConfig":"32"},{"size":3107,"mtime":1643285738168,"results":"59","hashOfConfig":"32"},{"size":6897,"mtime":1643285738098,"results":"60","hashOfConfig":"32"},{"size":9302,"mtime":1643285738144,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"yztpg2",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"64"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"64"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"64"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"141"},"C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\index.js",[],["142","143"],"C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\reportWebVitals.js",[],"C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\App.js",["144"],"import React, {useState} from 'react';\r\nimport {Switch, Route, BrowserRouter} from 'react-router-dom';\r\nimport RegisterForm from './components/Register/RegisterForm'\r\nimport LoginForm from './components/Login/LoginForm'\r\nimport Home from './components/Home/Home'\r\nimport ProfileUser from './components/Profile/UserProfile/ProfileUser'\r\nimport ProfileRecruiter from './components/Profile/RecruiterProfile/ProfileRecruiter'\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport MainPage from \"./components/MainPage/MainPage\";\r\nimport Jobs from \"./components/Jobs/jobPostsList\";\r\nimport {AppContext, AUTH_TYPE_JOB_SEEKER, AUTH_TYPE_RECRUITER, defaultContextValue} from \"./AppContext\";\r\nimport ProtectedRoute from \"./ProtectedRoute\";\r\nimport ProtectedCondRoute from \"./ProtectedCondRoute\";\r\nimport SetUserRole from \"./components/Register/SetUserRole\";\r\nimport ChangePassword from \"./components/Login/ChangePassword\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const [context, setCtx] = useState(defaultContextValue);\r\n    const setContext = (object) => setCtx({...context, ...object});\r\n    return (\r\n        <div>\r\n            <AppContext.Provider value={{context, setContext}}>\r\n                <BrowserRouter>\r\n                    {/*{context.isAuth || context.currentUser?._id && <Navbar></Navbar>}*/}\r\n                    {context.isAuth && <Navbar></Navbar>}\r\n\r\n                    <Switch>\r\n                        <Route exact path=\"/\">{!context.isAuth ? <MainPage/> :\r\n                            <Home />\r\n                        }</Route>\r\n                        <Route exact path=\"/register\">\r\n                            <RegisterForm isJobseeker={context.userType}/></Route>\r\n                        <Route exact path=\"/login\"><LoginForm/></Route>\r\n                        <Route exact path=\"/status-definition\"><SetUserRole/></Route>\r\n                        <Route exact path=\"/change-password\"><ChangePassword/></Route>\r\n                        <ProtectedRoute exact path=\"/home\" component={Home}/>\r\n                        <ProtectedCondRoute exact path=\"/my-profile\"\r\n                                            condition={context.userType === AUTH_TYPE_RECRUITER}\r\n                                            componentTrue={ProfileRecruiter} componentFalse={ProfileUser}/>\r\n                        <ProtectedRoute exact path=\"/my-profile-user\" component={ProfileUser}/>\r\n                        <ProtectedRoute exact path=\"/my-profile-recruiter\" component={ProfileRecruiter}/>\r\n                        <ProtectedRoute exact path=\"/jobs\" component={Jobs}/>\r\n                        <ProtectedCondRoute exact path=\"/profiles/:id\" component={ProfileUser}/>\r\n                        <ProtectedCondRoute exact path=\"/recruiters/:id\" component={ProfileRecruiter}/>\r\n\r\n\r\n                    </Switch>\r\n                </BrowserRouter>\r\n\r\n            </AppContext.Provider>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\AppContext.js",[],"C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\ProtectedCondRoute.js",["145"],"import {Redirect, Route} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport ProtectedRoute from \"./ProtectedRoute\";\r\n\r\nconst ProtectedCondRoute = ({ componentTrue, componentFalse, condition, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={(props) => {\r\n                return <ProtectedRoute component={condition ? componentTrue : componentFalse} {...rest} />;\r\n\r\n        }}\r\n    />\r\n);\r\n\r\nexport default ProtectedCondRoute;\r\n","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\ProtectedRoute.js",[],"C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Navbar\\Navbar.js",["146"],"import React, {Component} from 'react';\r\nimport {withRouter} from \"react-router\";\r\nimport {MenuItems} from \"./MenuItems\";\r\nimport './Navbar.css';\r\nimport logo from './../../images/logo.png';\r\nimport {AppContext, AUTH_TYPE_JOB_SEEKER} from \"../../AppContext\";\r\nimport {Link} from 'react-router-dom';\r\nimport SearchBar from \"../SearchBar/SearchBar\";\r\n\r\n\r\nclass Navbar extends Component {\r\n    static contextType = AppContext;\r\n\r\n    state = {\r\n        clicked: false,\r\n        active: false,\r\n        isjobSeeker: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.context.context.userType === AUTH_TYPE_JOB_SEEKER) {\r\n            this.setState({isjobSeeker: true});\r\n\r\n        }\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.setState({clicked: !this.state.clicked});\r\n    }\r\n\r\n\r\n    handleSearch = (inputSearch) => {\r\n\r\n        this.state.isjobSeeker ?\r\n            this.props.history.push(`/jobs/?job=${inputSearch}`)\r\n            :\r\n            this.props.history.push(`/home/?job=${inputSearch}`);\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <AppContext.Consumer>\r\n\r\n                {(globalContext) => (\r\n                    <nav className=\"NavbarItems\">\r\n\r\n                        <Link to='/home' className=\"navbar-logo\"><img src={logo}/></Link>\r\n\r\n                        <div className=\"search-navbar d-none d-lg-block\">\r\n                            <SearchBar search={this.handleSearch}/>\r\n                        </div>\r\n\r\n                        <div className=\"menu-icon\" onClick={this.handleClick}>\r\n                            <i className={this.state.clicked ? 'fas fa-times' : 'fas fa-bars'}></i>\r\n                        </div>\r\n                        <ul className={this.state.clicked ? 'nav-menu active' : 'nav-menu'}>                             {this.state.clicked &&\r\n                        <li className=\"d-inline d-md-none search-navbar-hid\">\r\n                            <SearchBar search={this.handleSearch}/></li>}\r\n\r\n                            {MenuItems(globalContext).map((item, index) => {\r\n                                return (\r\n                                    <li key={index}>\r\n                                        <Link to={item.url} onClick={item.command ? item.command : () => {\r\n                                        }} className={item.cName} id={this.state.clicked ? \"active\" : \"none\"}>\r\n                                            {item.title}\r\n                                        </Link>\r\n                                    </li>\r\n                                )\r\n                            })}\r\n                        </ul>\r\n                    </nav>)}\r\n            </AppContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(Navbar);\r\n","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Home\\Home.js",["147","148","149","150"],"import React, {Component} from 'react';\r\nimport {withRouter} from \"react-router\";\r\nimport './Home.css';\r\nimport {getInstance} from \"../../helpers/httpInstance\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport defaultPic from '../../images/Unknown_person.jpg';\r\nimport {Link} from 'react-router-dom';\r\nimport {AppContext, AUTH_TYPE_JOB_SEEKER, AUTH_TYPE_RECRUITER} from \"../../AppContext\";\r\nimport Loader from \"../Loader\";\r\n\r\nconst http = getInstance();\r\n\r\nclass Home extends Component {\r\n    static contextType = AppContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            profilesToDisplay: null,\r\n            relatedJobs: [],\r\n            allProfiles: null,\r\n            user: null,\r\n            noData: false\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        const {currentUser, userType} = await this.context.context; //important\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        if (urlParams.has('job')) {\r\n            const job = urlParams.get('job');\r\n            this.searchJob(job);\r\n        } else {\r\n            await this.getAllUsersProfiles();\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        if (this.props.location !== prevProps.location) {\r\n\r\n            this.setState({noData: false});\r\n\r\n            const urlParams = new URLSearchParams(window.location.search);\r\n            if (urlParams.has('job')) {\r\n                const job = urlParams.get('job');\r\n                this.searchJob(job);\r\n            } else {\r\n                if (this.context.context.userType === AUTH_TYPE_RECRUITER) {\r\n                    this.findRelatedJobSeekers();\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    getAllRecruiters = async () => {\r\n        try {\r\n            const url = '/recruiters';\r\n            const response = await http.get(url);\r\n            this.setState({profilesToDisplay: response?.data})\r\n\r\n        } catch (e) {\r\n            console.log(e?.response?.data);\r\n        }\r\n    }\r\n\r\n    recruitersMatch = async (job) => {\r\n\r\n        try {\r\n            const url = `/recruiters/findRelatedRecruiters/?job=${job}`;\r\n            const response = await http.get(url);\r\n            response?.data.length === 0 ?\r\n                await this.getAllRecruiters() :\r\n                this.setState({profilesToDisplay: response?.data});\r\n\r\n        } catch (e) {\r\n            console.log(e?.response?.data);\r\n        }\r\n    }\r\n\r\n    getAllUsersProfiles = async () => {\r\n\r\n        const {currentUser, userType} = await this.context.context;\r\n        this.setState({user: currentUser});\r\n        //job seeker\r\n        if (userType === AUTH_TYPE_JOB_SEEKER) {\r\n            const {job} = this.state.user;\r\n            await this.recruitersMatch(job);\r\n        }\r\n        //recruiter\r\n        else {\r\n            await this.findRelatedJobSeekers();\r\n\r\n\r\n        }\r\n    }\r\n\r\n    searchJob = (job) => {\r\n\r\n        const url = this.context.context.userType === AUTH_TYPE_RECRUITER ?\r\n            `/users/search/?job=${job}` : `/recruiters/search/?job=${job}`;\r\n\r\n        http.get(url).then(({data}) => {\r\n            this.setState({profilesToDisplay: data})\r\n            if (data.length === 0) {\r\n                this.setState({noData: true});\r\n            }\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n    }\r\n\r\n\r\n    getAllJobSeekers = async () => {\r\n\r\n        try {\r\n            console.log(\"ds  get alljobseeker\")\r\n            const url = '/users';\r\n            const response = await http.get(url);\r\n            this.setState({profilesToDisplay: response?.data});\r\n\r\n        } catch (e) {\r\n            console.log(e?.response?.data);\r\n        }\r\n    }\r\n\r\n    findRelatedJobSeekers = async () => {\r\n        const {user} = this.state;\r\n\r\n        try {\r\n            const url = `/recruiters/findRelatedJobSeeker/?id=${user._id}`;\r\n            const response = await http.get(url);\r\n\r\n            console.log(response?.data);\r\n            response?.data.length === 0 ? await this.getAllJobSeekers() :\r\n                this.setState({profilesToDisplay: response?.data});\r\n\r\n        } catch (e) {\r\n            console.log(e?.response?.data);\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const {profilesToDisplay, noData} = this.state;\r\n        const type = this.context.context.userType;\r\n\r\n        if (!profilesToDisplay) {\r\n            return <Loader/>;\r\n        }\r\n\r\n        return (\r\n            <div className=\" home-page\">\r\n                <div className=\"container-background\">\r\n                    <h1 id=\"slogan\">Find Your Ideal Job</h1>\r\n                    <hr className=\"separator\"/>\r\n                </div>\r\n\r\n\r\n                <div className=\"bg-light p-3\">\r\n                    <div className=\"container profiles-users-wrapper px-3 pb-4 shadow\">\r\n\r\n                        <div className=\"row   justify-content-md-start\">\r\n                                <h1 className=\"mb-5 mt-2  col-12 text-center\"> <span>{type === AUTH_TYPE_RECRUITER ?   'JOB SEEKERS' : 'Recruiters' }</span></h1>\r\n                            {noData && <div className=\"p-3\">\r\n                                Sorry we didn't find profiles of job seekers/jobPost according to your search !\r\n                            </div>}\r\n\r\n                            {profilesToDisplay?.map((profile, index) =>\r\n                                <div className=\"border-profile shadow col-5 col-md-4 rounded profile-user my-2\">\r\n                                    <div className=\"  \" key={uuid()}>\r\n                                        {profile.picture || profile.profileImg ?\r\n                                            <img className=\"pic-profile-home\"\r\n                                                 src={`${profile.picture || profile.profileImg}`}\r\n                                                 alt=\"profile picture\"/> :\r\n                                            <img className=\"pic-profile-home\" src={defaultPic} alt=\"profile picture\"/>\r\n                                        }\r\n\r\n                                        <p className=\"font-weight-bold mb-1\">{profile.firstname} {profile.lastname}</p>\r\n                                        <p className=\"job-title\">{profile.job}</p>\r\n\r\n                                        <Link\r\n                                            to={this.context.context.userType === AUTH_TYPE_RECRUITER ? `/profiles/${profile._id}` : `/recruiters/${profile._id}`}>\r\n                                            <button type=\"button\" className=\"btn btn-primary\">\r\n                                                View profile\r\n                                            </button>\r\n                                        </Link>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(Home);\r\n","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Register\\RegisterForm.js",["151"],"import React, {useContext, useState} from 'react';\r\nimport {Grid, Paper, Avatar, TextField, Button} from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport {getInstance} from \"../../helpers/httpInstance\";\r\nimport * as Yup from \"yup\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport {useHistory, withRouter} from \"react-router\"\r\nimport {Link} from \"react-router-dom\";\r\nimport \"../Login/LoginManager.css\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport {AuthServiceFactory} from \"../../services/authService\";\r\nimport {AppContext, AUTH_TYPE_JOB_SEEKER, AUTH_TYPE_RECRUITER} from \"../../AppContext\";\r\nimport {debounce} from \"lodash\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst authService = AuthServiceFactory.getInstance();\r\n\r\n\r\nconst USER = 'USER';\r\nconst userValidator = Yup.object().shape({\r\n\r\n    _id: Yup.string().optional().nullable(),\r\n    job: Yup.string(),\r\n    password: Yup.string().min(6).required(),\r\n    confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords must match'),\r\n\r\n    lastname: Yup.string().matches(/^[a-zA-Z\\s]+$/, \"Invalid Last name\").min(2).required(\"Last name is a required field\"),\r\n    firstname: Yup.string().matches(/^[a-zA-Z\\s]+$/, \"Invalid First name\").min(2).required(\" First name is a required field\"),\r\n    email: Yup.string().email().required(),\r\n    _v: Yup.number().optional().nullable()\r\n\r\n});\r\nconst http = getInstance();\r\n\r\nconst RegisterForm = (props) => {\r\n\r\n\r\n    const history = useHistory();\r\n\r\n    const {context, setContext} = useContext(AppContext);\r\n\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const [user, setUser] = useState({});\r\n    const [error, setError] = useState(null);\r\n\r\n\r\n    const [currentStep, setCurrentStep] = useState(1);\r\n    const [places, setPlace] = useState([]);\r\n    const [jobs, setJob] = useState([]);\r\n    const [checked, setChecked] = useState(false);\r\n\r\n\r\n    const handleChange = () => {\r\n        setChecked(!checked);\r\n        setIsSubmitting(checked);\r\n    };\r\n\r\n\r\n    const loadPlaceOptions = (newValue) => {\r\n        const url = '/place';\r\n        http.get(url, {params: {city: newValue}}).then(response => {\r\n            setPlace(response?.data || [])\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n\r\n        });\r\n\r\n    }\r\n\r\n    const handleUserChange = async (newValue) => {\r\n\r\n        await setUser({...user, ...newValue})\r\n    }\r\n\r\n\r\n    const onSubmit = () => {\r\n        context.userType === AUTH_TYPE_JOB_SEEKER ? userSubmit() : recruiterSubmit();\r\n\r\n    }\r\n\r\n    const recruiterSubmit = () => {\r\n        const url = '/recruiters';\r\n        setIsSubmitting(true);\r\n\r\n        userValidator.validate(user).then(() => {\r\n\r\n            http.post(url, user).then(response => {\r\n                setIsSubmitting(false);\r\n                const {email, password} = user;\r\n                authService.logIn(email, password).then(() => {\r\n                    setContext({isAuth: true, currentUser: authService.getCurrentUser(), userType: AUTH_TYPE_RECRUITER})\r\n                    history.push('/home');\r\n\r\n\r\n                }).catch(error => {\r\n                    console.log(error.response.data);\r\n                    setError(error.response.data);\r\n                });\r\n\r\n            }).catch(error => {\r\n                console.log(error?.response?.data);\r\n                setError(error?.response?.data);\r\n                setIsSubmitting(false);\r\n\r\n            });\r\n\r\n        }).catch((e) => {\r\n            setError(e.errors);\r\n            setIsSubmitting(false)\r\n        });\r\n    }\r\n\r\n    const userSubmit = async () => {\r\n\r\n        const url = '/users';\r\n        setIsSubmitting(true);\r\n\r\n\r\n        await userValidator.validate(user).then(() => {\r\n\r\n            if (!checked) {\r\n                setError(\"Are you over 18 years old ?\");\r\n                return;\r\n            }\r\n\r\n            if (currentStep === 1) {\r\n                setCurrentStep(currentStep + 1);\r\n                setError(null);\r\n                setIsSubmitting(false);\r\n                return;\r\n            }\r\n\r\n\r\n            http.post(url, user).then(response => {\r\n\r\n                createProfile({userId: response.data._id});\r\n                setIsSubmitting(false);\r\n                const {email, password} = user;\r\n                authService.logIn(email, password, USER).then(() => {\r\n                    setContext({\r\n                        isAuth: true,\r\n                        currentUser: authService.getCurrentUser(),\r\n                        userType: AUTH_TYPE_JOB_SEEKER\r\n                    })\r\n                    history.push('/home');\r\n\r\n                }).catch(error => {\r\n                    console.log(error.response.data);\r\n                    setError(error.response.data);\r\n                });\r\n\r\n            }).catch(error => {\r\n                console.log(error?.response?.data);\r\n                setError(error?.response?.data);\r\n                setIsSubmitting(false);\r\n                setCurrentStep(1);\r\n\r\n            });\r\n\r\n        }).catch((e) => {\r\n            setError(e.errors);\r\n            setIsSubmitting(false)\r\n        });\r\n    }\r\n\r\n\r\n    const createProfile = async (userId) => {\r\n        const url = '/profiles';\r\n        await http.post(url, userId).then(response => {\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n    }\r\n\r\n    const createRelatedJobs = async (jobId, jobTitle) => {\r\n\r\n        const url = `http://api.dataatwork.org/v1/jobs/${jobId}/related_jobs`;\r\n        await axios.get(url).then(res => {\r\n            handleUserChange({relatedJobs: res?.data?.related_job_titles.map(j => j.title), job: jobTitle});\r\n\r\n\r\n\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n\r\n\r\n    }\r\n\r\n    const handleJobChange = async (job) => {\r\n        if (job?.suggestion) {\r\n            await handleUserChange({job: job?.suggestion});\r\n        }\r\n        //await addJob(jobTitle);\r\n        await createRelatedJobs(job?.uuid, job?.suggestion);\r\n\r\n    }\r\n\r\n\r\n    const searchJob = async (newValue) => {\r\n        const url = `http://api.dataatwork.org/v1/jobs/autocomplete`;\r\n        await axios.get(url, {params: {begins_with: newValue}}).then(response => {\r\n            setJob(response?.data || [])\r\n\r\n\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"form-container\">\r\n\r\n\r\n            <Grid>\r\n                <Paper elevation={10} id=\"paper\">\r\n                    <Grid align=\"center\">\r\n                        <Avatar id=\"avatar\"><LockOutlinedIcon/></Avatar>\r\n                        {currentStep === 1 ? <h2 className=\"mt-1\">Register </h2> :\r\n                            <h2 className=\"job-search mt-1\">Search for a job</h2>\r\n                        }\r\n\r\n                    </Grid>\r\n\r\n\r\n                    {error && <Alert\r\n                        severity=\"error\"\r\n                        style={{margin: '15px'}}\r\n                        onClose={() => setError(null)}>\r\n                        <strong>{error}</strong>\r\n                    </Alert>}\r\n\r\n                    {currentStep === 1 && <div>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            className=\"input-control\"\r\n                            placeholder=\"enter your email\"\r\n                            onChange={e => handleUserChange({email: e.target.value})}\r\n                            fullWidth\r\n                            value={user.email}\r\n                            required\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"First name\"\r\n                            className=\"input-control\"\r\n                            placeholder=\"enter your first name\"\r\n                            onChange={e => handleUserChange({firstname: e.target.value})}\r\n                            fullWidth\r\n                            value={user.firstname}\r\n                            required\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Last name\"\r\n                            className=\"input-control\"\r\n                            placeholder=\"enter your last name\"\r\n                            onChange={e => handleUserChange({lastname: e.target.value})}\r\n                            fullWidth\r\n                            value={user.lastname}\r\n                            required\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Password\"\r\n                            className=\"input-control\"\r\n                            placeholder=\"enter your password\"\r\n                            type=\"password\"\r\n                            onChange={e => handleUserChange({password: e.target.value})}\r\n                            value={user.password}\r\n                            fullWidth\r\n                            required\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Confirm Password\"\r\n                            className=\"input-control\"\r\n                            placeholder=\"confirm your password\"\r\n                            type=\"password\"\r\n                            value={user.confirmPassword}\r\n                            onChange={e => handleUserChange({confirmPassword: e.target.value})}\r\n                            fullWidth\r\n                            required\r\n                        />\r\n\r\n                        {context?.userType === \"job_seeker\" &&\r\n                        <FormControlLabel\r\n                            className=\"checkbox\"\r\n                            control={\r\n                                <Checkbox\r\n                                    onChange={handleChange}\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label={<span style={{fontSize: '13px'}}>I am over 18 years old.</span>}\r\n\r\n                        />}\r\n\r\n                    </div>}\r\n\r\n                    {currentStep === 2 && context.userType === \"job_seeker\" && <div>\r\n\r\n                        <Autocomplete\r\n                            id=\"combo-box-demo\"\r\n                            className=\"job-autocomplete-register\"\r\n                            options={jobs}\r\n                            getOptionLabel={j => j.suggestion}\r\n                            fullWidth\r\n                            onInputChange={debounce((event, value) => searchJob(value), 300)}\r\n                            onChange={(event, value) => handleJobChange(value)}\r\n                            renderInput={(params) => (\r\n                                <TextField  {...params} label=\"Jobs\" className=\"location-title\"\r\n                                            variant=\"outlined\"/>\r\n                            )}\r\n                        />\r\n\r\n                        <Autocomplete\r\n                            id=\"combo-box-demo\"\r\n                            className=\"city-autocomplete-register\"\r\n                            options={places}\r\n                            fullWidth\r\n                            onInputChange={(event, value) => loadPlaceOptions(value)}\r\n                            onChange={(event, value) => handleUserChange({city: value})}\r\n                            renderInput={(params) => (\r\n                                <TextField  {...params} label=\"City\"\r\n                                            placeholder=\"City\"\r\n                                            variant=\"outlined\"/>\r\n                            )}\r\n                        />\r\n\r\n                    </div>}\r\n\r\n\r\n                    <Button\r\n                        type=\"submit\"\r\n                        color=\"primary\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        id=\"btn\"\r\n                        disabled={isSubmitting}\r\n                        onClick={() => onSubmit()}>\r\n                        Next\r\n                    </Button>\r\n\r\n                    <Grid container justify=\"flex-end\">\r\n                        <Grid item>Already have an account? {\" \"}\r\n                            <Link to={\"/login\"} variant=\"body2\">\r\n                                Sign in\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterForm;\r\n","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Login\\LoginForm.js",["152","153","154"],"import React, {useState} from 'react';\r\nimport {Grid, Paper, Avatar, TextField, Button} from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport \"./LoginManager.css\";\r\nimport {Redirect, withRouter} from \"react-router\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport {AuthServiceFactory} from \"../../services/authService\";\r\nimport {AppContext, AUTH_TYPE_JOB_SEEKER, AUTH_TYPE_RECRUITER} from \"../../AppContext\";\r\n\r\n\r\nconst authService = AuthServiceFactory.getInstance();\r\n\r\nconst LoginForm = (props) => {\r\n\r\n    const {history} = props;\r\n    const [error, setError] = useState(null);\r\n    const [user, setUser] = useState({});\r\n\r\n    const onUserChange = (newValue) => {\r\n        setUser({...user, ...newValue})\r\n    }\r\n\r\n    const onSubmit = (callback) => {\r\n        const {email, password} = user;\r\n        authService.logIn(email, password).then(() => {\r\n            history.push('/home');\r\n            callback();\r\n\r\n        }).catch(error => {\r\n            console.log(error.response.data);\r\n            setError(error.response.data);\r\n        });\r\n    }\r\n\r\n    if(authService.isAuth()) {\r\n        return <Redirect to={'/home'} />\r\n    }\r\n\r\n    return (\r\n        <AppContext.Consumer>\r\n            {({context, setContext}) => (\r\n                <div className=\"form-container\">\r\n                    <div>\r\n                        <Grid>\r\n                            <Paper elevation={10} id=\"paper\">\r\n                                <Grid align=\"center\">\r\n                                    <Avatar id=\"avatar\"><LockOutlinedIcon/></Avatar>\r\n                                    <h2>Sign in</h2>\r\n                                </Grid>\r\n\r\n\r\n                                {error && <Alert\r\n                                    severity=\"error\"\r\n                                    style={{margin: '15px'}}\r\n                                    onClose={() => setError(null)}>\r\n                                    <strong>{error}</strong>\r\n                                </Alert>}\r\n\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    onChange={e => onUserChange({email: e.target.value})}\r\n                                    className=\"input-control label-field\"\r\n                                    placeholder=\"enter your email\"\r\n                                    fullWidth\r\n                                    required\r\n                                />\r\n\r\n                                <TextField\r\n                                    label=\"Password\"\r\n                                    onChange={e => onUserChange({password: e.target.value})}\r\n                                    className=\"input-control label-field mt-3\"\r\n                                    placeholder=\"enter your password\"\r\n                                    type=\"password\"\r\n                                    fullWidth\r\n                                    required\r\n                                />\r\n\r\n\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    color=\"primary\"\r\n                                    fullWidth\r\n                                    className=\"mt-3\"\r\n                                    variant=\"contained\"\r\n                                    id=\"btn\"\r\n                                    onClick={() => onSubmit(() => setContext({\r\n                                        currentUser: authService.getCurrentUser(),\r\n                                        isAuth: authService.isAuth(),\r\n                                        userType: authService.getCurrentUser()?.userType\r\n                                    }))}>\r\n                                    Sign in\r\n                                </Button>\r\n\r\n\r\n                                <div className=\"row mb-4\">\r\n                                    <div className=\"col-12 col-md-7\" >\r\n                                        <small>Already have an account? </small>\r\n                                        <a onClick={() => {\r\n                                            setContext({userType: AUTH_TYPE_JOB_SEEKER});\r\n                                            history.push('/status-definition')\r\n\r\n                                        }} className=\"forget-password\">\r\n                                            <small>Sign up</small>\r\n                                        </a>\r\n                                    </div>\r\n                                    <div className=\"col-12 col-md-5 text-md-right\" >\r\n                                        <a onClick={() => {\r\n                                            history.push('/change-password')\r\n\r\n                                        }} className=\"forget-password\" >\r\n                                            <small>I forgot my password</small>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </Paper>\r\n                        </Grid>\r\n                    </div>\r\n\r\n                </div>\r\n            )}\r\n\r\n        </AppContext.Consumer>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default withRouter(LoginForm);\r\n","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\MainPage\\MainPage.js",["155","156","157","158"],"import React, { useState, Fragment } from \"react\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport logo from \"../../images/logo.png\";\r\nimport \"./MainPage.css\";\r\nimport homePageImg from \"../../images/homepage.jpg\";\r\n<<<<<<< HEAD\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport {AppContext, AUTH_TYPE_JOB_SEEKER, AUTH_TYPE_RECRUITER} from \"../../AppContext\";\r\n\r\n\r\nconst MainPage = ({history}) => {\r\n\r\n\r\n    return (\r\n        <AppContext.Consumer>\r\n            {({context, setContext}) => (<Fragment>\r\n                <header>\r\n                    <div>\r\n                        <div className=\"navbar-home\">\r\n                            <div>\r\n                                <Link to='/'>\r\n                                    <img src={logo}/>\r\n                                </Link>\r\n                            </div>\r\n\r\n                            <div >\r\n                                <Link to='/login' className='btn login-btn'>Sign in</Link>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </header>\r\n\r\n                <div >\r\n                    <div className='row p-5'>\r\n                        <div className='col-12 col-md'>\r\n                            <h1 className=\"header-title text-center text-md-left my-md-3\">Welcome in our community !</h1>\r\n\r\n                            <div className=\"center-sm\">\r\n\r\n                                <button onClick={() => {\r\n                                    setContext({userType: AUTH_TYPE_RECRUITER});\r\n                                    history.push('/register')\r\n                                }} className=\"btn btn-mainpage border mt-5\" type=\"button\">\r\n                                    Post a job\r\n                                    <ArrowForwardIosIcon className=\"arrow-icon\"\r\n                                                         style={{fontSize: 30}}>\r\n                                        Post a job\r\n                                    </ArrowForwardIosIcon>\r\n                                </button>\r\n\r\n                                <button onClick={() => {\r\n                                    setContext({userType: AUTH_TYPE_JOB_SEEKER});\r\n                                    history.push('/register')\r\n                                }} className=\"btn btn-mainpage border \" type=\"button\">\r\n                                    Search for a job\r\n                                    <ArrowForwardIosIcon className=\"arrow-icon\"\r\n                                                         style={{fontSize: 30}}>\r\n\r\n                                    </ArrowForwardIosIcon>\r\n                                </button>\r\n\r\n                                <button onClick={() => {\r\n                                    setContext({userType: AUTH_TYPE_RECRUITER});\r\n                                    history.push('/register')\r\n                                }} className=\"btn btn-mainpage border\" type=\"button\">\r\n                                    Search profiles\r\n                                    <ArrowForwardIosIcon className=\"arrow-icon\"\r\n                                                         style={{fontSize: 30}}>\r\n\r\n                                    </ArrowForwardIosIcon>\r\n                                </button>\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n\r\n                        <div className='col-12 col-md img-home d-none d-lg-block'>\r\n                            <img src={homePageImg} className='homepage-img' alt='homepage image'/>\r\n                        </div>\r\n                    </div>\r\n=======\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport {\r\n  AppContext,\r\n  AUTH_TYPE_JOB_SEEKER,\r\n  AUTH_TYPE_RECRUITER,\r\n} from \"../../AppContext\";\r\n\r\nconst MainPage = ({ history }) => {\r\n  return (\r\n    <AppContext.Consumer>\r\n      {({ context, setContext }) => (\r\n        <Fragment>\r\n          <header>\r\n            <div>\r\n              <div className=\"navbar-home\">\r\n                <div>\r\n                  <Link to=\"/\">\r\n                    <img src={logo} />\r\n                  </Link>\r\n>>>>>>> origin/master\r\n                </div>\r\n\r\n                <div>\r\n                  <Link to=\"/login\" className=\"btn login-btn\">\r\n                    Sign in\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </header>\r\n\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row p-5\">\r\n              <div className=\"col-12 col-md\">\r\n                <h1 className=\"header-title text-center text-md-left\">\r\n                  Welcome in our community !\r\n                </h1>\r\n\r\n                <div className=\"center-sm\">\r\n                  <button\r\n                    onClick={() => {\r\n                      setContext({ userType: AUTH_TYPE_RECRUITER });\r\n                      history.push(\"/register\");\r\n                    }}\r\n                    className=\"btn btn-mainpage border mt-5\"\r\n                    type=\"button\"\r\n                  >\r\n                    Post a job\r\n                    <ArrowForwardIosIcon\r\n                      className=\"arrow-icon\"\r\n                      style={{ fontSize: 30 }}\r\n                    >\r\n                      Post a job\r\n                    </ArrowForwardIosIcon>\r\n                  </button>\r\n\r\n                  <button\r\n                    onClick={() => {\r\n                      setContext({ userType: AUTH_TYPE_JOB_SEEKER });\r\n                      history.push(\"/register\");\r\n                    }}\r\n                    className=\"btn btn-mainpage border\"\r\n                    type=\"button\"\r\n                  >\r\n                    Search for a job\r\n                    <ArrowForwardIosIcon\r\n                      className=\"arrow-icon\"\r\n                      style={{ fontSize: 30 }}\r\n                    ></ArrowForwardIosIcon>\r\n                  </button>\r\n\r\n                  <button\r\n                    onClick={() => {\r\n                      setContext({ userType: AUTH_TYPE_RECRUITER });\r\n                      history.push(\"/register\");\r\n                    }}\r\n                    className=\"btn btn-mainpage border\"\r\n                    type=\"button\"\r\n                  >\r\n                    Search profiles\r\n                    <ArrowForwardIosIcon\r\n                      className=\"arrow-icon\"\r\n                      style={{ fontSize: 30 }}\r\n                    ></ArrowForwardIosIcon>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"col-12 col-md img-home d-none d-lg-block\">\r\n                <img\r\n                  src={homePageImg}\r\n                  className=\"homepage-img\"\r\n                  alt=\"homepage image\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Fragment>\r\n      )}\r\n    </AppContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default withRouter(MainPage);\r\n","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Jobs\\jobPostsList.js",["159","160","161","162","163","164","165"],"import {getInstance} from \"../../helpers/httpInstance\";\r\nimport React, {Component} from \"react\";\r\nimport {withRouter} from \"react-router\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport './JobPostsList.css';\r\nimport LaunchIcon from '@material-ui/icons/Launch';\r\nimport defaultPic from \"../../images/unknown-company.PNG\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Apply from \"../Apply/Apply\";\r\nimport {AppContext, AUTH_TYPE_JOB_SEEKER} from \"../../AppContext\";\r\nimport Loader from \"../Loader\";\r\n\r\nconst http = getInstance();\r\n\r\nclass JobPostsList extends Component {\r\n    static contextType = AppContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            recruiters: null,\r\n            onclickJobPost: false,\r\n            currentJobPost: null,\r\n            currentRecruiter: null,\r\n            onApply: false,\r\n            jobposts: null,\r\n            onSearch: false,\r\n            user: null\r\n        };\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const {currentUser, userType} = await this.context.context;//important\r\n        this.getRecruitersJobPosts();\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.location !== prevProps.location) {\r\n            console.log(\"URL CHANGED\", this.state);\r\n            this.getRecruitersJobPosts();\r\n        }\r\n    }\r\n\r\n    getRecruitersJobPosts = async () => {\r\n\r\n        const {currentUser} = await this.context.context;\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n\r\n        if (urlParams.has('job')) {\r\n            this.getJobParam();\r\n        } else {\r\n            this.setState({user: currentUser});\r\n            const {job} = this.state.user;\r\n            this.getJobPosts(job || \"\"); // or just put recruitersMatch(); and \"\" if recruiter\r\n        }\r\n\r\n    }\r\n    getJobParam = async () => {\r\n\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        const jobSearch = urlParams.get('job');\r\n        await this.getJobPosts(jobSearch);\r\n        //await this.getJobsTitle(jobSearch);\r\n    }\r\n\r\n    getJobPosts = async (jobSearch) => {\r\n\r\n        const url = `/recruiters/search/?job=${jobSearch}`;\r\n        await http.get(url).then(({data}) => {\r\n            this.handleChangeRecruiters(data);\r\n            const recruiters = this.state.recruiters;\r\n\r\n            if (recruiters.length !== 0) {\r\n                const firstJp = recruiters[0]?.jobPosts[0];\r\n                this.setState({currentJobPost: firstJp, currentRecruiter: recruiters[0]});\r\n            } else {\r\n                //if array of recruiters empty => fill with all recruiters\r\n                this.getJobPosts(\"\");\r\n            }\r\n\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n    }\r\n\r\n    handleChangeRecruiters = async (newRecruiters) => {\r\n\r\n        await this.setState({recruiters: newRecruiters});\r\n    }\r\n\r\n    getAllRecruiters = async () => {\r\n        const url = `/recruiters`;\r\n        await http.get(url).then(response => {\r\n            this.setState({\r\n                recruiters: response.data,\r\n                currentJobPost: response.data[0].jobPosts[0],\r\n                currentRecruiter: response.data[0]\r\n            });\r\n\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n    }\r\n\r\n    recruitersMatch = async () => {\r\n\r\n        const {currentUser, userType} = await this.context.context;\r\n        this.setState({user: currentUser});\r\n        const {job} = this.state.user;\r\n\r\n        try {\r\n            const url = `/recruiters/search/?job=${job}`;\r\n            const response = await http.get(url);\r\n            this.setState({\r\n                recruiters: response.data,\r\n                currentJobPost: response.data[0].jobPosts[0],\r\n                currentRecruiter: response.data[0]\r\n            });\r\n\r\n        } catch (e) {\r\n            console.log(e?.response?.data);\r\n        }\r\n    }\r\n\r\n    onClickJobPost = (jobPost, recruiter) => {\r\n        this.setState({currentJobPost: jobPost, currentRecruiter: recruiter})\r\n    }\r\n\r\n    onApply = () => {\r\n        this.setState({onApply: !this.state.onApply});\r\n    }\r\n\r\n    onCloseWindow = () => {\r\n\r\n        this.setState({onApply: false});\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        const {userType} = this.context.context;\r\n        const {recruiters, currentJobPost, currentRecruiter, onApply} = this.state;\r\n\r\n\r\n        if (!recruiters) {\r\n            return <Loader/>;\r\n        }\r\n\r\n        return (\r\n\r\n            <div className=\"py-md-3\">\r\n                <div className=\"container  bg-light border rounded p-md-3\">\r\n\r\n                    {recruiters.length === 0 && <div>there is no job Post</div>}\r\n\r\n                    <div className=\"row\">\r\n                        <h1 className=\"job-title-head d-md-none\"><span>JOB POSTS</span></h1>\r\n                    </div>\r\n\r\n                    <div className=\"row  flex-row-reverse flex-md-row mt-4 contain-jpList  \">\r\n\r\n                        <div className=\"col-12 col-md-5 jobPost-list \">\r\n                            {recruiters.map((recruiter, index) =>\r\n                                <div key={uuid()} className=\"row\">\r\n                                    <div className=\"col-12 \">\r\n\r\n                                        {recruiter.jobPosts && recruiter.jobPosts.map((jp) =>\r\n                                            <div key={uuid()} className=\"one-jp border pl-3\"\r\n                                                 onClick={() => this.onClickJobPost(jp, recruiter)}>\r\n\r\n                                                {jp.companyImg && recruiter.profileImg ?\r\n                                                    <img className=\"jp-pic\"\r\n                                                         src={`${recruiter?.profileImg}`}\r\n                                                         alt=\"company logo\"/> :\r\n                                                    <img className=\"jp-pic\" src={defaultPic} alt=\"company logo\"/>}\r\n                                                <h5 className=\"jp-title\">{jp.title}</h5>\r\n                                                <a className=\"jp-company\" href={jp.url}\r\n                                                   target=\"_blank\">{jp.companyName}</a>\r\n                                                <p className=\"jp-loc\">{jp.location}</p>\r\n                                            </div>)\r\n                                        }\r\n                                    </div>\r\n                                </div>)\r\n\r\n                            }\r\n\r\n                        </div>\r\n\r\n                        <hr className=\"line-separator d-md-none\"></hr>\r\n\r\n\r\n\r\n                        <div className=\"col-12 col-md-6 current-jp\">\r\n                            {currentJobPost &&\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12\">\r\n                                    <div className=\"row px-2\">\r\n                                        <div className=\"col-12 col-md-3 job-img-description\">\r\n                                            {currentJobPost.companyImg && currentRecruiter.profileImg ?\r\n                                                <img className=\"jp-pic-current img-fluid\"\r\n                                                     src={`${currentRecruiter?.profileImg}`}\r\n                                                     alt=\"company logo\"/> :\r\n                                                <img className=\"jp-pic img-fluid\" src={defaultPic} alt=\"company logo\"/>}\r\n\r\n                                        </div>\r\n                                        <div className=\"col-12 col-md-9 job-summary-description\">\r\n                                            <h5 className=\"jp-title-current\">{currentJobPost.title}</h5>\r\n                                            <a className=\"jp-company-current\" href={currentJobPost.url}\r\n                                               target=\"_blank\">{currentJobPost.companyName}</a>\r\n                                            <p className=\"jp-loc-current\">{currentJobPost.location}</p>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n\r\n                                        <div className=\"col-12 col-md-6 mt-3 ml-1 text-center text-md-left\">\r\n                                            {currentJobPost.url && <a href={currentJobPost.url} target=\"_blank\">\r\n                                                <button className=\"btn btn-jp-visit \">\r\n                                                    Visit Website\r\n\r\n                                                </button>\r\n                                            </a>}\r\n                                            {userType === AUTH_TYPE_JOB_SEEKER &&\r\n                                            <button className=\"btn btn-jp-apply font-weight-bolder\"\r\n                                                    onClick={() => this.onApply()}>\r\n                                                <a>Apply\r\n                                                    <LaunchIcon\r\n                                                        fontSize=\"small\">\r\n                                                    </LaunchIcon>\r\n                                                </a>\r\n                                            </button>}\r\n\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <hr className=\"line-separator\"></hr>\r\n                                    <p className=\"font-weight-bolder pb-2 m-0\"><u>Job Description</u></p>\r\n                                    <p className=\"jp-descr-current\"> {currentJobPost.description}</p>\r\n\r\n                                    <hr className=\"line-separator\"></hr>\r\n\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-5 jp-empl-current\">\r\n                                            <p className=\"font-weight-bolder m-0\"><u>Employment Type</u></p>\r\n                                            <p> {currentJobPost.employment}</p>\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n                                </div>\r\n                            </div>\r\n                            }\r\n                        </div>\r\n\r\n                        {onApply &&\r\n                        <Dialog open={onApply}\r\n                                onClose={this.onCloseWindow}\r\n                                aria-labelledby=\"form-dialog-title\">\r\n                            <DialogTitle id=\"form-dialog-title\">\r\n                                <p className=\"text-center font-weight-bold \">\r\n                                    Apply to {currentJobPost.companyName}\r\n                                    <button type=\"button\" className=\"close\" aria-label=\"Close\"\r\n                                            onClick={this.onCloseWindow}>\r\n                                        <span aria-hidden=\"true\">&times;</span>\r\n                                    </button>\r\n                                </p>\r\n                            </DialogTitle>\r\n                            <DialogContent>\r\n                                <Apply currentRecruiter={currentRecruiter}\r\n                                       onSubmit={this.onCloseWindow}/>\r\n                            </DialogContent>\r\n                        </Dialog>\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(JobPostsList);\r\n\r\n","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\UserProfile\\ProfileUser.js",["166","167","168","169","170"],"import React, {Component} from 'react';\r\nimport {withRouter} from \"react-router\";\r\nimport picImage from '../../../images/Unknown_person.jpg';\r\nimport {getInstance} from \"../../../helpers/httpInstance\";\r\nimport './ProfileUser.css';\r\nimport {AuthServiceFactory} from \"../../../services/authService\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Experience from \"./Experiences/Experience\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport DeleteExperienceControl from \"./Experiences/DeleteExperienceControl\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport Education from \"./Education/Education\";\r\nimport DeleteEducationControl from \"./Education/DeleteEducationControl\";\r\nimport ContactForm from \"../../ContactForm/ContactForm\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport WorkIcon from '@material-ui/icons/Work';\r\nimport AccountBalanceIcon from '@material-ui/icons/AccountBalance';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ImportContactsIcon from '@material-ui/icons/ImportContacts';\r\nimport {Divider} from \"@material-ui/core\";\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport ContactInfo from \"../ContactInfos/ContactInfo\";\r\nimport {AppContext} from \"../../../AppContext\";\r\nimport Loader from \"../../Loader\";\r\n\r\nconst http = getInstance();\r\nconst EDUCATION_ARRAY = \"EDUCATION_ARRAY\";\r\nconst EXPERIENCE_ARRAY = \"EXPERIENCE_ARRAY\";\r\n\r\nclass ProfileUser extends Component {\r\n\r\n    static contextType = AppContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            profile: null,\r\n            onChangeProfileInfo: false,\r\n            onChangeExperiences: false,\r\n            onDeleteExperiences: false,\r\n            onChangeEducations: false,\r\n            onDeleteEducations: false,\r\n            originalSelectedEducation: null,\r\n            user: null,\r\n            selectedExperience: null,\r\n            originalSelectedExperience: null,\r\n            selectedEducation: null,\r\n            fileToUpload: null,\r\n            uploadedFile: null,\r\n            isMyProfile: true,\r\n            onContactinfo: false,\r\n\r\n        };\r\n        this.uploadImg = React.createRef();\r\n    }\r\n\r\n    /**\r\n     * Quand le html a ete init\r\n     */\r\n    async componentDidMount() {\r\n\r\n        const user = AuthServiceFactory.getInstance().getCurrentUser();\r\n        this.props.match.params.id ? // if user visit other profiles or his profile\r\n            await this.isVisitedProfile(false, `/users/${this.props.match.params.id}`) :\r\n            await this.isVisitedProfile(true, `/users/${user._id}`)\r\n\r\n    }\r\n\r\n    isVisitedProfile = async (isMyProfile, url) => {\r\n\r\n        await http.get(url).then(response => {\r\n            this.setState({user: response.data, isMyProfile: isMyProfile});\r\n            this.getProfile(this.state.user._id);\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n    }\r\n\r\n    getProfile = (userId) => {\r\n        const url = `/profiles/${userId}`;\r\n        http.get(url).then(response => {\r\n            this.setState({profile: response.data});\r\n\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n    }\r\n\r\n    handlePictureChange = async () => {\r\n        if (this.state.profile.profileImg) {\r\n            const oldUser = {...this.state.user};\r\n            const userRecord = {...oldUser, picture: this.state.profile.profileImg};\r\n            await this.setState({user: userRecord});\r\n            await this.onSaveInfo(this.state.user);\r\n        }\r\n    }\r\n\r\n    onSubmitUpdate = async () => {\r\n        const url = '/profiles';\r\n        const {profile} = this.state;\r\n        http.put(url, profile).then(response => {\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n        this.setState({onChangeInfo: false});\r\n        await this.handlePictureChange();\r\n\r\n    }\r\n\r\n    handleProfileChange = (newValueObject) => {\r\n        const oldProfile = {...this.state.profile}; // Deep Copy of the profile field\r\n        const newProfile = {...oldProfile, ...newValueObject}; // Merge two profile\r\n        this.setState({profile: newProfile});\r\n    }\r\n\r\n    addDataArray = (type) => {\r\n\r\n        type === EXPERIENCE_ARRAY ?\r\n            this.setState({\r\n                onChangeExperiences: !this.state.onChangeExperiences,\r\n                selectedExperience: null,\r\n                originalSelectedExperience: null\r\n            }) :\r\n            this.setState({\r\n                onChangeEducations: !this.state.onChangeEducations,\r\n                selectedEducation: null,\r\n                originalSelectedEducation: null\r\n            });\r\n\r\n    }\r\n\r\n    updateDataArray = (data, type) => {\r\n\r\n        type === EXPERIENCE_ARRAY ?\r\n            this.setState({\r\n                onChangeExperiences: !this.state.onChangeExperiences,\r\n                selectedExperience: data,\r\n                originalSelectedExperience: {...data}\r\n            }) :\r\n            this.setState({\r\n                onChangeEducations: !this.state.onChangeEducations,\r\n                selectedEducation: data,\r\n                originalSelectedEducation: {...data}\r\n            });\r\n    }\r\n\r\n    deleteDataArray = (data, type) => {\r\n\r\n        type === EXPERIENCE_ARRAY ?\r\n            this.setState({\r\n                onDeleteExperiences: !this.state.onDeleteExperiences,\r\n                selectedExperience: data,\r\n                originalSelectedExperience: {...data}\r\n            }) :\r\n            this.setState({\r\n                onDeleteEducations: !this.state.onDeleteEducations,\r\n                selectedEducation: data,\r\n                originalSelectedEducation: {...data}\r\n            });\r\n    }\r\n\r\n    handleExperienceSubmit = (newExperience) => {\r\n\r\n        const {profile, selectedExperience} = this.state;\r\n        const newProfile = {...profile};\r\n        const isNewExperience = !selectedExperience;\r\n\r\n        if (isNewExperience) {\r\n            newProfile.experience = newProfile?.experience ? [...newProfile.experience, newExperience] : [newExperience];\r\n\r\n        } else {\r\n\r\n            newProfile.experience = newProfile?.experience.map(\r\n                exp => exp.companyName === this.state.originalSelectedExperience.companyName &&\r\n                exp.startDate === this.state.originalSelectedExperience.startDate ? newExperience : exp);\r\n        }\r\n        // On modifie le profile mais on attend quil click sur le button valide pour faire le PUT dans le serveur\r\n        this.setState({profile: newProfile, selectedExperience: null, onChangeExperiences: false});\r\n\r\n    }\r\n\r\n    handleEducationSubmit = (newEducation) => {\r\n        const {profile, selectedEducation} = this.state;\r\n        const newProfile = {...profile};\r\n        const isNewEducation = !selectedEducation;\r\n\r\n        if (isNewEducation) {\r\n            newProfile.education = newProfile?.education ? [...newProfile.education, newEducation] : [newEducation];\r\n\r\n        } else {\r\n            newProfile.education = newProfile?.education.map(\r\n                educ => educ.collegeName === this.state.originalSelectedEducation.collegeName ? newEducation : educ);\r\n        }\r\n\r\n\r\n        // On modifie le profile mais on attend quil click sur le button valide pour faire le PUT dans le serveur\r\n        this.setState({profile: newProfile, selectedEducation: null, onChangeEducations: false});\r\n    }\r\n\r\n    handleDelete = (dataToDelete, type) => {\r\n\r\n        const {profile} = this.state;\r\n        const newProfile = {...profile};\r\n\r\n        if (type === EXPERIENCE_ARRAY) {\r\n            newProfile.experience = newProfile.experience.filter(exp => exp !== dataToDelete);\r\n            this.setState({profile: newProfile, selectedExperience: null, onDeleteExperiences: false});\r\n        } else {\r\n            newProfile.education = newProfile.education.filter(educ => educ !== dataToDelete);\r\n            this.setState({profile: newProfile, selectedEducation: null, onDeleteEducations: false});\r\n        }\r\n\r\n    }\r\n\r\n    handleProfilePictureChange = (event) => {\r\n        // Get File Infos\r\n        const fileToUpload = event.target.files[0];\r\n        this.setState({fileToUpload});\r\n        this.uploadFile(fileToUpload);\r\n    }\r\n\r\n\r\n\r\n    uploadFile = (fileToUpload) => {\r\n        if (!fileToUpload) {\r\n            return null; // Not file to upload\r\n        }\r\n\r\n        //Format file before uploading (BECAUSE IS NOT JSON)\r\n        const formData = new FormData();\r\n        formData.append(\r\n            \"img\",\r\n            fileToUpload,\r\n            fileToUpload.name\r\n        );\r\n        // TODO Ac changer avec env variable\r\n        const url = '/uploadImg';\r\n\r\n        http.post(url, formData).then(({data}) => {\r\n            // Change profile info\r\n            const newProfile = {...this.state.profile};\r\n            // Set link of the proile\r\n            newProfile.profileImg = data.link;\r\n            this.setState({profile: newProfile, fileToUpload: null});\r\n        })\r\n    }\r\n\r\n    onCloseWindowDelete = (type) => {\r\n\r\n        type === EXPERIENCE_ARRAY ?\r\n            this.setState({onDeleteExperiences: false}) :\r\n            this.setState({onDeleteEducations: false});\r\n    };\r\n\r\n    onCloseWindowChange = (type) => {\r\n\r\n        type === EXPERIENCE_ARRAY ?\r\n            this.setState({onChangeExperiences: false}) :\r\n            this.setState({onChangeEducations: false});\r\n\r\n    };\r\n\r\n    onClickUpdateInfos = () => {\r\n        this.setState({onChangeInfo: !this.state.onChangeInfo})\r\n    }\r\n\r\n    formatDate(date) {\r\n        if (!date) {\r\n            return null;\r\n        }\r\n        const obj = new Date(date);\r\n        const options = {year: 'numeric', month: 'long'};\r\n        return obj.toLocaleDateString(\"en-US\", options);\r\n\r\n    }\r\n\r\n    onSaveInfo = async (user) => {\r\n\r\n        const url = '/users';\r\n        await http.put(url, user).then(response => {\r\n            this.setState({user: response.data});\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n\r\n        await this.context.setContext({currentUser: this.state.user});\r\n        this.setState({onChangeInfo: false});\r\n\r\n    }\r\n\r\n    onContactInfo = () => {\r\n        this.setState({onContactInfo: true});\r\n    };\r\n\r\n    onCloseWindow = () => {\r\n        this.setState({ onContactInfo: false})\r\n    };\r\n\r\n    render() {\r\n        const {user, profile, selectedExperience, selectedEducation} = this.state;\r\n\r\n\r\n        // TODO a changer avec env variable\r\n        const profilePictureImg = profile?.profileImg ? `${profile?.profileImg}` : picImage;\r\n        return (\r\n            <div>\r\n\r\n                {profile ? <div className=\"container mt-5\">\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <section className=\"presentation-section border rounded p-2\">\r\n                                <div className=\"picture\"\r\n                                     onClick={() => this.state.onChangeInfo && this.uploadImg.current.click()}>\r\n                                    {this.state.onChangeInfo ?\r\n                                    <img className=\"profile-pic-edit\" src={profilePictureImg} alt=\"profile picture\"/>:\r\n                                        <img className=\"profile-pic\" src={profilePictureImg} alt=\"profile picture\"/>\r\n                                    }\r\n                                    {this.state.onChangeInfo &&\r\n                                    <div className=\"change-img\"></div>}\r\n                                </div>\r\n\r\n                                <div className=\"infos m-1 text-center\">\r\n                                    <p className=\"name\">{user.firstname} {user.lastname}</p>\r\n                                    <p className=\"job\">{user.job}</p>\r\n                                    {user.phone && <p className=\"phone\">\r\n                                        <CallIcon fontSize=\"small\"/>{user.phone}</p>}\r\n                                    <p className=\"city\">{user.city}</p>\r\n\r\n                                    <a href=\"#\" className=\"contact-info-btn\"\r\n                                            onClick={this.onContactInfo}>Contact Info\r\n                                    </a>\r\n                                </div>\r\n\r\n\r\n                                {this.state.isMyProfile &&\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12\">\r\n\r\n\r\n                                        {this.state.onChangeInfo ?<div className=\" float-right p-2 text-info\">\r\n                                            <button className=\"btn btn-info\" onClick={this.onSubmitUpdate}>\r\n                                                Update\r\n                                            </button>\r\n                                        </div> :\r\n\r\n                                            <IconButton aria-label=\"edit\" className=\"float-right p-2 text-info\"\r\n                                                        onClick={this.onClickUpdateInfos}>\r\n\r\n                                                <EditIcon>\r\n                                                    fontSize=\"small\"\r\n                                                    Update profile\r\n                                                </EditIcon>\r\n                                            </IconButton>\r\n                                        }\r\n                                    </div>\r\n                                </div>}\r\n\r\n\r\n                            </section>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row mt-5\">\r\n                        <div className=\"col-12\">\r\n                            <section className=\"bg-light rounded p-5 border description-user \">\r\n                                <Avatar className=\"bg-info mx-auto\">\r\n                                    <ImportContactsIcon/>\r\n                                </Avatar>\r\n                                <h1 className=\"category-profile mb-3 p-0 \">Description</h1>\r\n                                {this.state.onChangeInfo ?\r\n                                    <TextField\r\n                                        id=\"outlined-multiline-static\"\r\n                                        label=\"Description\"\r\n                                        multiline\r\n                                        rows={4}\r\n                                        onChange={e => this.handleProfileChange({description: e.target.value})}\r\n                                        variant=\"outlined\"\r\n                                        fullWidth\r\n                                        value={profile.description}\r\n                                    /> : profile.description}\r\n                            </section>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row mt-5\">\r\n                        <div className=\"col-12\">\r\n                            <section className=\"bg-light rounded p-5 border\">\r\n                                <div className=\"education\">\r\n                                    <Avatar className=\"bg-info mx-auto\">\r\n                                        <AccountBalanceIcon/>\r\n                                    </Avatar>\r\n                                    <h1 className=\"category-profile mb-4 p-0 \">\r\n                                        Education &nbsp;\r\n                                        {this.state.onChangeInfo &&\r\n                                        <IconButton aria-label=\"add\" className=\"text-info\"\r\n                                                    onClick={() => this.addDataArray(EDUCATION_ARRAY)}>\r\n                                            <AddCircleOutlineIcon>\r\n                                            </AddCircleOutlineIcon></IconButton>}\r\n                                    </h1>\r\n                                    {\r\n                                        profile.education && profile.education.map((formation, index) =>\r\n\r\n                                            <div className=\"mt-2 pl-2\" key={uuid()}>\r\n\r\n                                                <h4 className=\"company-educ-name\"><a href={formation.link}\r\n                                                                                     target=\"_blank\">{formation.collegeName}</a>\r\n                                                </h4>\r\n                                                {this.state.onChangeInfo &&\r\n                                                <div style={{float: \"right\"}}>\r\n                                                    <IconButton aria-label=\"edit\" className=\"text-info\"\r\n                                                                onClick={() => this.updateDataArray(formation, EDUCATION_ARRAY)}>\r\n                                                        <EditIcon fontSize=\"small\"></EditIcon>\r\n                                                    </IconButton>\r\n                                                    <IconButton aria-label=\"delete\" className=\"text-danger\"\r\n                                                                onClick={() => this.deleteDataArray(formation, EDUCATION_ARRAY)}>\r\n                                                        <DeleteIcon\r\n                                                            fontSize=\"small\">\r\n\r\n                                                        </DeleteIcon>\r\n                                                    </IconButton>\r\n                                                </div>\r\n                                                }\r\n                                                <p className=\"position-type\">{formation.degree}</p>\r\n                                                <p className=\"date\"> {this.formatDate(formation.startDate)} - {this.formatDate(formation.endDate)} </p>\r\n                                                {index !== profile.education.length - 1 &&\r\n                                                <hr className=\"between-category-separator\"/>}\r\n\r\n                                            </div>)\r\n                                    }\r\n\r\n                                </div>\r\n                                <Divider className=\"my-5\"/>\r\n                                <div className=\"experiences\">\r\n                                    <Avatar className=\"bg-info mx-auto\">\r\n                                        <WorkIcon/>\r\n                                    </Avatar>\r\n                                    <h1 className=\"category-profile mb-4 p-0 \">\r\n                                        Experiences &nbsp;\r\n                                        {this.state.onChangeInfo &&\r\n                                        <IconButton aria-label=\"add\" className=\"text-info\"\r\n                                                    onClick={() => this.addDataArray(EXPERIENCE_ARRAY)}>\r\n                                            <AddCircleOutlineIcon>\r\n                                            </AddCircleOutlineIcon></IconButton>}\r\n                                    </h1>\r\n                                    {\r\n                                        profile.experience && profile.experience.map((exp, index) =>\r\n\r\n                                            <div key={uuid()} className=\"mt-2 pl-2\">\r\n\r\n                                                <h4 className=\"company-educ-name\"><a href={exp.link}\r\n                                                                                     target=\"_blank\">{exp.companyName}</a>\r\n                                                </h4>\r\n                                                {this.state.onChangeInfo &&\r\n                                                <div style={{float: \"right\"}}>\r\n                                                    <IconButton aria-label=\"edit\" className=\"text-info\"\r\n                                                                onClick={() => this.updateDataArray(exp, EXPERIENCE_ARRAY)}>\r\n\r\n                                                        <EditIcon\r\n                                                            fontSize=\"small\">\r\n                                                        </EditIcon>\r\n                                                    </IconButton>\r\n                                                    <IconButton aria-label=\"delete\" className=\"text-danger\"\r\n                                                                onClick={() => this.deleteDataArray(exp, EXPERIENCE_ARRAY)}>\r\n                                                        <DeleteIcon\r\n                                                            fontSize=\"small\">\r\n                                                        </DeleteIcon>\r\n                                                    </IconButton>\r\n                                                </div>\r\n                                                }\r\n                                                <p className=\"position-type\">{exp.position}</p>\r\n                                                <p className=\"date\">{this.formatDate(exp.startDate)} - {this.formatDate(exp.endDate)} </p>\r\n                                                <p className=\"description-exp\">{exp.description}</p>\r\n                                                {index !== profile.experience.length - 1 &&\r\n                                                <hr className=\"between-category-separator\"/>}\r\n\r\n                                            </div>)\r\n                                    }\r\n\r\n                                </div>\r\n\r\n                                {this.state.onChangeInfo &&\r\n                                <div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"file\" ref={this.uploadImg} className=\"d-none\" id=\"profilePicture\"\r\n                                               onChange={this.handleProfilePictureChange} name=\"profile-picture\"/>\r\n                                    </div>\r\n                                </div>}\r\n\r\n                                {this.state.onChangeInfo && <div className=\" text-center mt-5\">\r\n                                    <button className=\"btn btn-info w-50\" onClick={this.onSubmitUpdate}>\r\n                                        Save\r\n                                    </button>\r\n                                </div>}\r\n\r\n                            </section>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"row mt-5 mb-2\">\r\n                        <div className=\"col-12\">\r\n                            <section className=\"bg-light rounded p-5 border contact-form\">\r\n                                <ContactForm profileFirstName={user?.firstname}\r\n                                             profileLastName={user?.lastname}\r\n                                             emailDest={user?.email}></ContactForm>\r\n\r\n\r\n                            </section>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <Dialog open={this.state.onChangeInfo && this.state.onChangeExperiences}\r\n                            onClose={this.updateDataArray}\r\n                            aria-labelledby=\"form-dialog-title\">\r\n                        <DialogTitle id=\"form-dialog-title\"><p className=\"text-center title-dialog\">Experience</p>\r\n                        </DialogTitle>\r\n                        <DialogContent>\r\n                            <Experience experience={selectedExperience}\r\n                                        onExperienceSubmit={this.handleExperienceSubmit}\r\n                                        onClose={() => this.onCloseWindowChange(EXPERIENCE_ARRAY)}/>\r\n                        </DialogContent>\r\n                    </Dialog>\r\n\r\n\r\n                    <Dialog open={this.state.onChangeInfo && this.state.onChangeEducations}\r\n                            onClose={this.updateDataArray}\r\n                            aria-labelledby=\"form-dialog-title\">\r\n                        <DialogTitle id=\"form-dialog-title\"><p className=\"text-center title-dialog\">Education</p>\r\n                        </DialogTitle>\r\n                        <DialogContent>\r\n                            <Education education={selectedEducation}\r\n                                       onEducationSubmit={this.handleEducationSubmit}\r\n                                       onClose={() => this.onCloseWindowChange(EDUCATION_ARRAY)}/>\r\n                        </DialogContent>\r\n                    </Dialog>\r\n\r\n\r\n                    <Dialog open={this.state.onChangeInfo && this.state.onDeleteExperiences}\r\n                            onClose={this.deleteDataArray}\r\n                            aria-labelledby=\"form-dialog-title\">\r\n                        <DialogContent>\r\n                            <DeleteExperienceControl experience={selectedExperience}\r\n                                                     type={EXPERIENCE_ARRAY}\r\n                                                     onExperienceSubmit={this.handleDelete}\r\n                                                     onClose={() => this.onCloseWindowDelete(EXPERIENCE_ARRAY)}/>\r\n                        </DialogContent>\r\n                    </Dialog>\r\n\r\n\r\n                    <Dialog open={this.state.onChangeInfo && this.state.onDeleteEducations}\r\n                            onClose={this.deleteDataArray}\r\n                            aria-labelledby=\"form-dialog-title\">\r\n                        <DialogContent>\r\n                            <DeleteEducationControl education={selectedEducation}\r\n                                                    type={EDUCATION_ARRAY}\r\n                                                    onEducationSubmit={this.handleDelete}\r\n                                                    onClose={() => this.onCloseWindowDelete(EDUCATION_ARRAY)}/>\r\n                        </DialogContent>\r\n                    </Dialog>\r\n\r\n\r\n                    <Dialog open={this.state.onContactInfo}\r\n                            onClose={this.onCloseWindow}\r\n                            aria-labelledby=\"form-dialog-title\">\r\n                        <DialogContent>\r\n                            <button type=\"button\" className=\"close\" aria-label=\"Close\"\r\n                                    onClick={this.onCloseWindow}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                            <ContactInfo onSubmit={this.onSaveInfo} user={user}/>\r\n                        </DialogContent>\r\n                    </Dialog>\r\n\r\n\r\n                </div> : <Loader />}\r\n\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(ProfileUser);\r\n","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\RecruiterProfile\\ProfileRecruiter.js",["171","172","173","174","175","176","177","178","179","180","181","182","183","184"],"import React, {Component, useState} from \"react\";\r\nimport {AuthServiceFactory} from \"../../../services/authService\";\r\nimport {withRouter} from \"react-router\";\r\nimport './ProfileRecruiter.css';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ContactForm from \"../../ContactForm/ContactForm\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport JobPost from \"./JobPost/JobPost\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {getInstance} from \"../../../helpers/httpInstance\";\r\nimport {v4 as uuid} from \"uuid\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport defaultPic from \"../../../images/unknown-company.PNG\";\r\nimport LaunchIcon from '@material-ui/icons/Launch';\r\nimport {AppContext, defaultContextValue} from \"../../../AppContext\";\r\nimport Loader from \"../../Loader\";\r\n\r\n\r\nconst http = getInstance();\r\n\r\nclass ProfileRecruiter extends Component {\r\n    static contextType = AppContext;\r\n\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {\r\n            recruiter: null,\r\n            onChangeJobPost: false,\r\n            selectedJobPost: null,\r\n            fileToUpload: null,\r\n            onEditImg: false,\r\n            newImgSource: null,\r\n            uploadedFile: null,\r\n            onViewJob: false,\r\n            onEditInfos: false,\r\n            originalSelectedJp: null,\r\n            isMyProfile: true,\r\n\r\n        };\r\n        this.uploadImg = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const recruiter = AuthServiceFactory.getInstance().getCurrentUser();\r\n        this.setState({recruiter});\r\n        this.getProfile(recruiter._id);\r\n\r\n        this.props.match.params.id ? // if user visit other profiles or his profile\r\n            this.isVisitedProfile(false, `/recruiters/${this.props.match.params.id}`) :\r\n            this.isVisitedProfile(true, `/recruiters/${recruiter._id}`)\r\n\r\n\r\n    }\r\n\r\n    isVisitedProfile = async (isMyProfile, url) => {\r\n\r\n        await http.get(url).then(response => {\r\n            this.setState({recruiter: response.data, isMyProfile: isMyProfile});\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n    }\r\n\r\n    handleProfilePictureChange = async (event) => {\r\n        // Get File Infos\r\n\r\n        const fileToUpload = event.target.files[0];\r\n        await this.setState({fileToUpload, onEditImg: true});\r\n        await this.uploadFile(this.state.fileToUpload);\r\n\r\n    }\r\n\r\n    editInfos = async () => {\r\n\r\n        const {recruiter} = this.state;\r\n        if (this.state.onEditImg) {\r\n            recruiter.profileImg = this.state.newImgSource;\r\n        }\r\n\r\n        if (recruiter.firstname === '' || recruiter.lastname === '') {\r\n            return;\r\n        }\r\n\r\n        const url = '/recruiters';\r\n\r\n        http.put(url, recruiter).then(response => {\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n\r\n        this.setState({onEditInfos: false});\r\n    }\r\n\r\n    uploadFile = async (fileToUpload) => {\r\n        if (!fileToUpload) {\r\n            return null; // Not file to upload\r\n        }\r\n\r\n        //Format file before uploading (BECAUSE IS NOT JSON)\r\n        const formData = new FormData();\r\n        formData.append(\r\n            \"img\",\r\n            fileToUpload,\r\n            fileToUpload.name\r\n        );\r\n\r\n        const url = '/uploadImg';\r\n\r\n        await http.post(url, formData).then(({data}) => {\r\n            // Change profile info\r\n            if (this.state.onEditImg) {\r\n                this.setState({newImgSource: data.link, fileToUpload: null});\r\n            }\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n\r\n    }\r\n\r\n\r\n    getProfile = (id) => {\r\n        const url = `/recruiters/${id}`;\r\n        http.get(url).then(response => {\r\n            this.setState({recruiter: response.data});\r\n\r\n\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n    }\r\n\r\n    addJobPost = () => {\r\n        this.setState({onChangeJobPost: !this.state.onChangeJobPost, selectedJobPost: null, originalSelectedJp: null});\r\n    }\r\n\r\n    updateJobPostsList = (data) => {\r\n\r\n        this.setState({onChangeJobPost: !this.state.onChangeJobPost, selectedJobPost: data, originalSelectedJp: data});\r\n    }\r\n\r\n    onCloseWindow = () => {\r\n\r\n\r\n        this.setState({\r\n            onChangeJobPost: false,\r\n            selectedJobPost: null,\r\n            onViewJob: false,\r\n            onEditInfos: false,\r\n            originalSelectedJp: null\r\n        });\r\n    };\r\n\r\n\r\n    handleJobSubmit = async (newPostJob) => {\r\n\r\n        const {recruiter, selectedJobPost, isMyProfile} = this.state;\r\n        const newRecruiter = {...recruiter};\r\n        const isNewPostJob = !selectedJobPost;\r\n\r\n        if (isNewPostJob) {\r\n            newRecruiter.jobPosts = newRecruiter?.jobPosts ? [...newRecruiter.jobPosts, newPostJob] : [newPostJob];\r\n\r\n        } else {\r\n            newRecruiter.jobPosts = newRecruiter?.jobPosts.map(jp => (\r\n                jp.companyName === this.state.originalSelectedJp.companyName &&\r\n                jp.title === this.state.originalSelectedJp.title) ? newPostJob : jp);\r\n        }\r\n        await this.setState({recruiter: newRecruiter, selectedJobPost: null, onChangeJobPost: false});\r\n        await this.updateJobPost();\r\n\r\n\r\n    }\r\n\r\n    handleDelete = async (jobpost) => {\r\n        const {recruiter} = this.state;\r\n        const newRecruiter = {...recruiter};\r\n        newRecruiter.jobPosts = newRecruiter.jobPosts.filter(\r\n            jp => (jp.companyName !== this.state.originalSelectedJp.companyName ||\r\n                jp.title !== this.state.originalSelectedJp.title ||\r\n                jp.description !== this.state.originalSelectedJp.description));\r\n        await this.setState({recruiter: newRecruiter, selectedJobPost: null, onChangeJobPost: false});\r\n        await this.updateJobPost();\r\n\r\n    }\r\n\r\n    updateJobPost = async () => {\r\n        const url = '/recruiters';\r\n        const {recruiter} = this.state;\r\n        await http.put(url, recruiter).then(response => {\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n        this.setState({onChangeJobPost: false});\r\n        await this.context.setContext({currentUser: this.state.recruiter});\r\n\r\n    }\r\n\r\n    showJobPost = (jobPost) => {\r\n        this.setState({onViewJob: !this.state.onViewJob, selectedJobPost: jobPost});\r\n\r\n    }\r\n\r\n    handleChangeInfos = () => {\r\n        this.setState({onEditInfos: !this.state.onEditInfos});\r\n\r\n    }\r\n\r\n    changeInfos = async (newValue) => {\r\n        const oldRecruiter = {...this.state.recruiter}; // Deep Copy of the profile field\r\n        const newRecruiter = {...oldRecruiter, ...newValue};\r\n        this.setState({recruiter: newRecruiter});\r\n    }\r\n\r\n    render() {\r\n\r\n        const {recruiter, selectedJobPost, onEditInfos, onViewJob, onChangeJobPost, onEditImg, isMyProfile} = this.state;\r\n        const profilePictureImg = recruiter?.profileImg ? `${recruiter?.profileImg}` : defaultPic;\r\n        const newImg = onEditImg ? `${this.state.newImgSource}` : \"\";\r\n\r\n        if (!recruiter) {\r\n            return <Loader/>;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"container mt-5\">\r\n                    <div className=\"row\">\r\n                        <div className=\" col-12 col-md-4 p-2\">\r\n                            {/*profile picture + name + infos + visit website*/}\r\n                            <div className=\"presentation-profile\">\r\n\r\n                                {isMyProfile && <div>\r\n                                    <IconButton aria-label=\"edit\" className=\"text-info edit-icon\"\r\n                                                onClick={() => this.handleChangeInfos()}>\r\n                                        <EditIcon\r\n                                            fontSize=\"small\">\r\n                                        </EditIcon>\r\n                                    </IconButton>\r\n                                </div>}\r\n\r\n                                <section className=\"border rounded p-5\">\r\n                                    <div className=\"picture pb-4\">\r\n                                        {<a href={recruiter?.companyLink} target=\"_blank\">\r\n                                            <img className=\"pic-recruiter\" src={profilePictureImg}\r\n                                                 alt=\"profile picture\"/>\r\n                                        </a>}\r\n                                    </div>\r\n\r\n                                    <div className=\"infos m-1\">\r\n\r\n                                            <p className=\"name text-center font-weight-bold\">{recruiter?.firstname} {recruiter?.lastname}</p>\r\n\r\n                                    </div>\r\n\r\n                                    {recruiter?.companyLink && <button className=\"visit-website btn border bg-light\">\r\n                                        <a href={recruiter?.companyLink} target=\"_blank\">Visit website\r\n                                            <LaunchIcon\r\n                                                fontSize=\"small\">\r\n                                            </LaunchIcon></a>\r\n                                    </button>}\r\n\r\n\r\n                                </section>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\" col-12 col-md-8 mt-5 mt-md-0 p-2 jobposts-recruiter-list \">\r\n\r\n                            {/*jobposts of recruiter*/}\r\n                            <section className=\"bg-light rounded  border\">\r\n                                <h1 className=\"category-profile ml-3 \"> JobPosts\r\n                                    {isMyProfile && <IconButton aria-label=\"add\" className=\"text-info\"\r\n                                                                onClick={() => this.addJobPost()}>\r\n                                        <AddCircleOutlineIcon\r\n                                            fontSize=\"large\">\r\n                                        </AddCircleOutlineIcon>\r\n                                    </IconButton>}\r\n                                </h1>\r\n                                {recruiter?.jobPosts && recruiter?.jobPosts.length ?\r\n                                    <div className=\"\">\r\n                                        {\r\n                                            recruiter?.jobPosts && recruiter.jobPosts.map((jp, index) =>\r\n\r\n                                                <div key={uuid()} className=\"each-one-jobpost border\">\r\n\r\n                                                    <div className=\"row\" onClick={() => this.showJobPost(jp)}>\r\n                                                        <div className=\"col ml-3\">\r\n\r\n                                                            {jp.companyImg ?\r\n                                                                <img className=\"company-pic\" src={profilePictureImg}\r\n                                                                     alt=\"company picture\"/> :\r\n                                                                <img className=\"company-pic\" src={defaultPic}\r\n                                                                     alt=\"company picture\"/>}\r\n\r\n                                                            <h5 className=\"r-company-name pt-2\">{jp.companyName}</h5>\r\n                                                            <p className=\"r-title p-0 m-0\">{jp.title}</p>\r\n                                                            <p className=\"r-location p-0 m-0\">{jp.location}</p>\r\n\r\n\r\n                                                            {isMyProfile && <IconButton aria-label=\"show\"\r\n                                                                                        className=\"text-info show-icon\"\r\n                                                                                        onClick={() => this.updateJobPostsList(jp)}>\r\n                                                                <EditIcon\r\n                                                                    fontSize=\"small\">\r\n                                                                </EditIcon>\r\n                                                            </IconButton>}\r\n\r\n\r\n                                                        </div>\r\n                                                    </div>\r\n\r\n                                                </div>)\r\n                                        }\r\n                                    </div> :\r\n\r\n                                    <p className=\"p-3\">there is no job post !</p>\r\n                                }\r\n\r\n                            </section>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/*contact formulaire*/}\r\n                    <div className=\"row mt-5 mb-2\">\r\n                        <div className=\"col-12\">\r\n                            <section className=\"bg-light rounded p-5 border contact-form\">\r\n                                <ContactForm\r\n                                    profileFirstName={recruiter?.firstname}\r\n                                    profileLastName={recruiter?.lastname}\r\n                                    emailDest={recruiter?.email}></ContactForm>\r\n                            </section>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/*change jobpost*/}\r\n                    {(onViewJob || onChangeJobPost) &&\r\n                    <Dialog open={onChangeJobPost}\r\n                            onClose={this.onCloseWindow}\r\n                            aria-labelledby=\"form-dialog-title\">\r\n                        <DialogTitle id=\"form-dialog-title\">\r\n                            <p className=\"text-center font-weight-bold \">\r\n                                Post a Job\r\n                                <button type=\"button\" className=\"close\" aria-label=\"Close\"\r\n                                        onClick={this.onCloseWindow}>\r\n                                    <span aria-hidden=\"true\">&times;</span>\r\n                                </button>\r\n                            </p>\r\n                        </DialogTitle>\r\n                        <DialogContent>\r\n                            <JobPost jobPost={selectedJobPost}\r\n                                     onFormSubmit={this.handleJobSubmit}\r\n                                     onPostDelete={this.handleDelete}\r\n                                     onClose={() => this.onCloseWindow()}/>\r\n                        </DialogContent>\r\n                    </Dialog>}\r\n\r\n                    {/*view jobpost*/}\r\n                    {selectedJobPost && !onChangeJobPost &&\r\n                    <Dialog open={onViewJob}\r\n                            onClose={this.onCloseWindow}\r\n                            aria-labelledby=\"form-dialog-title\">\r\n                        <DialogTitle id=\"form-dialog-title\">\r\n\r\n                            {selectedJobPost.companyImg ? <img className=\"company-pic-view\"\r\n                                                               src={profilePictureImg} alt=\"company picture\"/> :\r\n                                <img className=\"company-pic-view\"\r\n                                     src={defaultPic} alt=\"company picture\"/>\r\n                            }\r\n\r\n                            <p className=\"text-center jp-title-view\">\r\n                                {selectedJobPost.title}\r\n                            </p>\r\n                            <small>\r\n                                <h5 className=\"text-center m-0\"><a href={selectedJobPost.url}\r\n                                                                   target=\"_blank\">{selectedJobPost.companyName}</a>\r\n                                </h5>\r\n                                <p className=\"font-italic text-center\"> {selectedJobPost.location}</p>\r\n\r\n                            </small>\r\n\r\n                        </DialogTitle>\r\n\r\n                        <DialogContent>\r\n                            <div className=\"row \">\r\n                                <p className=\"col pl-4 jp-descr-current\">\r\n                                    {selectedJobPost.description}\r\n                                </p>\r\n                            </div>\r\n\r\n                            <div className=\"row\">\r\n                                <p className=\"col pl-4 \">Employment type: <br/>\r\n                                    <strong>{selectedJobPost.employment}</strong>\r\n\r\n                                </p>\r\n                            </div>\r\n\r\n                            <div className=\"row\">\r\n                                <div className=\"col btn\">\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        className=\"btn btn-primary \"\r\n                                        onClick={() => this.showJobPost(null)}>\r\n                                        Close\r\n                                    </button>\r\n\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                        </DialogContent>\r\n                    </Dialog>}\r\n\r\n                    {/*edit infos*/}\r\n                    {onEditInfos &&\r\n                    <Dialog open={onEditInfos}\r\n                            onClose={this.onCloseWindow}\r\n                            aria-labelledby=\"form-dialog-title\">\r\n                        <DialogTitle id=\"form-dialog-title\"><p className=\"text-center font-weight-bold edit-info\">Edit\r\n                            your profile</p>\r\n                        </DialogTitle>\r\n                        <DialogContent>\r\n\r\n                            <div className=\"picture pt-3 pb-3\">\r\n                                {onEditImg ?\r\n                                    <img className=\"profile-pic\" src={newImg} alt=\"profile picture\"/> :\r\n                                    <img className=\"profile-pic\" src={profilePictureImg} alt=\"profile picture\"/>}\r\n                            </div>\r\n\r\n\r\n                            <p className=\"update-pic\">Update you profile picture</p>\r\n                            <div>\r\n                                <input type=\"file\"\r\n                                       ref={this.uploadImg}\r\n                                       className=\"form-control input-file\"\r\n                                       id=\"actual-btn\"\r\n                                       name=\"profile-picture\"\r\n                                       hidden\r\n                                       onChange={this.handleProfilePictureChange} name=\"profile-picture\"/>\r\n                                <label className=\"label-upload\" htmlFor=\"actual-btn\">Choose File\r\n                                    <i className=\"pl-2 fa fa-upload\" aria-hidden=\"true\"></i>\r\n                                </label>\r\n                                <span id=\"file-chosen\">No file chosen</span>\r\n\r\n                            </div>\r\n\r\n                            <label className=\"perso-info-recruiter mt-3\"> First name\r\n                                <input\r\n                                    type=\"TEXT\"\r\n                                    className=\"form-control mt-2\"\r\n                                    onChange={e => this.changeInfos({firstname: e.target.value})}\r\n                                    placeholder=\"first name\"\r\n                                    value={recruiter.firstname}\r\n\r\n                                />\r\n                            </label>\r\n\r\n                            <label className=\"perso-info-recruiter \"> Last name\r\n                                <input\r\n                                    type=\"TEXT\"\r\n                                    className=\"form-control mt-2\"\r\n                                    placeholder=\"last name\"\r\n                                    value={recruiter.lastname}\r\n                                    onChange={e => this.changeInfos({lastname: e.target.value})}\r\n\r\n                                />\r\n                            </label>\r\n\r\n                            <label className=\"perso-info-recruiter \"> Email\r\n                                <input\r\n                                    type=\"email\"\r\n                                    className=\"form-control mt-2\"\r\n                                    placeholder=\"Email\"\r\n                                    value={recruiter.email}\r\n                                    onChange={e => this.changeInfos({email: e.target.value})}\r\n\r\n                                />\r\n                            </label>\r\n\r\n                            <label className=\"perso-info-recruiter \"> Website URL\r\n                                <input\r\n                                    type=\"TEXT\"\r\n                                    onChange={e => this.changeInfos({companyLink: e.target.value})}\r\n                                    className=\"form-control mt-2\"\r\n                                    placeholder=\"URL\"\r\n                                    value={recruiter.companyLink}\r\n\r\n                                />\r\n                                <button\r\n                                    className=\"btn btn-link remove-link\"\r\n                                    onClick={() => this.changeInfos({companyLink: \"\"})}>\r\n                                    Remove URL\r\n                                </button>\r\n                            </label>\r\n\r\n\r\n                            <div className=\"my-2 text-center\">\r\n                                <button\r\n                                    className=\"btn btn-primary\"\r\n                                    onClick={() => this.editInfos()}>\r\n                                    Save\r\n                                </button>\r\n                            </div>\r\n\r\n\r\n\r\n                        </DialogContent>\r\n                    </Dialog>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(ProfileRecruiter);\r\n","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\services\\authService.js",[],"C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Navbar\\MenuItems.js",[],"C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\helpers\\httpInstance.js",["185"],"import Axios, {AxiosInstance} from 'axios';\r\nimport Qs from 'qs';\r\nimport {AuthServiceFactory} from \"../services/authService\";\r\n\r\nlet axiosInstance = null;\r\n\r\nconst createInstance = () => {\r\n\r\n    const authService = AuthServiceFactory.getInstance();\r\n    const apiURL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api' || 'http://job1s.s3-website.eu-central-1.amazonaws.com/api';\r\n    const instance = Axios.create({\r\n        baseURL: apiURL,//base url for all request\r\n        paramsSerializer: params => Qs.stringify(params, {arrayFormat: 'brackets'})\r\n    });\r\n\r\n    // Interceptor: Auto add Token\r\n    instance.interceptors.request.use(\r\n        (config) => {\r\n            if (authService.isAuth()) {\r\n                const token = authService.getToken();\r\n                if (token) {\r\n                    config.headers['Authorization'] = 'Bearer ' + token;\r\n                }\r\n            }\r\n\r\n            return config;\r\n        },\r\n        (error) => {\r\n            return Promise.reject(error);\r\n        },\r\n    );\r\n\r\n\r\n    return instance;\r\n}\r\n\r\nconst getInstance = () => {\r\n\r\n    if (!axiosInstance) {\r\n        axiosInstance = createInstance();\r\n    }\r\n\r\n    return axiosInstance;\r\n}\r\n\r\nexport {getInstance};\r\n","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\UserProfile\\Education\\DeleteEducationControl.js",[],"C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\UserProfile\\Education\\Education.js",[],"C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\UserProfile\\Experiences\\DeleteExperienceControl.js",[],"C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\UserProfile\\Experiences\\Experience.js",[],"C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\ContactForm\\ContactForm.js",[],"C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\RecruiterProfile\\JobPost\\JobPost.js",["186","187"],"import React, {Component, useState} from 'react';\r\nimport './JobPost.css'\r\nimport {getInstance} from \"../../../../helpers/httpInstance\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport axios from \"axios\";\r\nimport {debounce} from \"lodash\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\nconst http = getInstance();\r\n\r\nclass JobPost extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            onChangeJobPost: false,\r\n            jobPost: null,\r\n            newJobPost: false,\r\n            fileToUpload: null,\r\n            places: [],\r\n            jobs: [],\r\n            checked: false,\r\n            removeJobPost: false,\r\n            originalJobPost: null,\r\n\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        if (this.props.jobPost) {// if exist\r\n            this.setState({checked: this.props.jobPost.companyImg});\r\n\r\n        } else {\r\n            this.setState({newJobPost: true});\r\n        }\r\n\r\n        const jobPost = this.props.jobPost || {companyName: ''};\r\n        this.setState({jobPost, originalJobPost: {...jobPost}});\r\n\r\n    }\r\n\r\n    handleChange = async () => {\r\n       await this.setState({checked: !this.state.checked});\r\n        await this.handleJobPostChange({companyImg: this.state.checked})\r\n\r\n    };\r\n\r\n\r\n    loadPlaceOptions = async (newValue) => {\r\n        const url = '/place';\r\n        await http.get(url, {params: {city: newValue}}).then(response => {\r\n            this.setState({places: response?.data || []})\r\n\r\n\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n\r\n        });\r\n\r\n        console.log(\"places= \",this.state.places);\r\n    }\r\n\r\n    handleJobTitleChange = (job) => {\r\n\r\n        const id = job.title?.uuid;\r\n\r\n        this.handleJobPostChange({jobPostId: id}).then(res => {\r\n            this.handleJobPostChange({title: job.title?.suggestion}).then(res => {\r\n            }).catch(error => {\r\n                console.log(error?.response?.data);\r\n\r\n            }).catch(error => {\r\n                console.log(error?.response?.data);\r\n\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n\r\n    handleJobPostChange = async (newValue) => {\r\n\r\n        const oldJobPost = {...this.state.jobPost}; // Deep Copy of the profile field\r\n        const newJobPost = {...oldJobPost, ...newValue};\r\n        this.setState({jobPost: newJobPost});\r\n\r\n        console.log(\"state: \",this.state.jobPost);\r\n\r\n    }\r\n\r\n    onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const {checked, removeJobPost, jobPost, originalJobPost, newJobPost} = this.state;\r\n        if (!checked) {\r\n            await this.handleJobPostChange({companyImg: false});\r\n        }\r\n\r\n        if (removeJobPost) {\r\n            this.props.onPostDelete(jobPost);\r\n        } else {\r\n            const isChangedJob = originalJobPost && originalJobPost.title !== jobPost.title;\r\n            if (newJobPost || isChangedJob) {\r\n                jobPost.relatedJobs = await this.getRelatedJobs();\r\n            }\r\n\r\n            this.props.onFormSubmit(jobPost);\r\n        }\r\n    }\r\n\r\n    getRelatedJobs = async () => {\r\n\r\n        const id = this.state.jobPost.jobPostId;\r\n        try {\r\n            const url = `http://api.dataatwork.org/v1/jobs/${id}/related_jobs`;\r\n\r\n            const response = await axios.get(url);\r\n            return response?.data?.related_job_titles.map(j => j.title);\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n\r\n    }\r\n\r\n    onClose = () => {\r\n        this.props.onClose();\r\n    }\r\n\r\n    onDelete = async () => {\r\n        await this.setState({removeJobPost: !this.state.removeJobPost});\r\n\r\n    }\r\n\r\n    searchJob = async (newValue) => {\r\n        const url = `http://api.dataatwork.org/v1/jobs/autocomplete`;\r\n        await axios.get(url, {params: {contains: newValue}}).then(response => {\r\n            this.setState({jobs: response?.data || []})\r\n\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const {jobPost} = this.state;\r\n\r\n        if (!jobPost) {\r\n            return null;\r\n        }\r\n\r\n\r\n        return (\r\n            <div className=\"container \">\r\n\r\n                <form action=\"\" onSubmit={this.onSubmit}>\r\n                    <label className=\"label-jp\">Company name <span className=\"mandatory\">*</span></label>\r\n                    <input\r\n                        type=\"text\"\r\n                        onChange={e => this.handleJobPostChange({companyName: e.target.value})}\r\n                        className=\"form-control\"\r\n                        fullWidth\r\n                        placeholder=\"Company name\"\r\n                        value={jobPost.companyName}\r\n                        required\r\n                    />\r\n\r\n\r\n                    <label className=\"label-jp\">Job <span className=\"mandatory\">*</span></label>\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        className=\"location-autocomplete\"\r\n                        options={this.state.jobs}\r\n                        getOptionLabel={option => option.suggestion || option}\r\n                        fullWidth\r\n                        freeSolo\r\n                        value={jobPost.title}\r\n                        onInputChange={debounce((event, value) => this.searchJob(value), 100)}\r\n                        onChange={(e, value) => this.handleJobTitleChange({title: value})}\r\n                        renderInput={(params) => (\r\n                            <TextField  {...params} className=\"location-title\"\r\n                                        variant=\"outlined\" required/>\r\n                        )}\r\n\r\n                    />\r\n\r\n                    <label className=\"label-jp\">Employment type <span className=\"mandatory\">*</span></label>\r\n                    <input\r\n                        type=\"text\"\r\n                        onChange={e => this.handleJobPostChange({employment: e.target.value})}\r\n                        className=\"form-control\"\r\n                        placeholder=\"Employment\"\r\n                        value={jobPost.employment}\r\n                        required\r\n                    />\r\n\r\n\r\n                    <label className=\"label-jp\">Location <span className=\"mandatory\">*</span></label>\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        className=\"location-autocomplete\"\r\n                        options={this.state.places}\r\n                        fullWidth\r\n                        freeSolo\r\n                        value={jobPost.location}\r\n                        onInputChange={(event, value) => {this.loadPlaceOptions(value);  this.handleJobPostChange({location: value})} }\r\n                        onChange={(event, value) => this.handleJobPostChange({location: value})}\r\n                        renderInput={(params) => (\r\n                            <TextField  {...params} className=\"location-title\"\r\n                                        variant=\"outlined\" required/>\r\n                        )}\r\n\r\n                    />\r\n\r\n\r\n                    <label className=\"label-jp\">Description <span className=\"mandatory\">*</span></label>\r\n                    <textarea\r\n                        className=\"form-control \"\r\n                        rows=\"6\"\r\n                        onChange={e => this.handleJobPostChange({description: e.target.value})}\r\n                        placeholder=\"Description\"\r\n                        value={jobPost.description}\r\n                        required\r\n\r\n                    />\r\n                    <label className=\"label-jp\">URL</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        onChange={e => this.handleJobPostChange({url: e.target.value})}\r\n                        className=\"form-control\"\r\n                        placeholder=\"URL\"\r\n                        value={jobPost.url}\r\n\r\n                    />\r\n\r\n                    <div>\r\n                        <FormControlLabel control={\r\n                            <Checkbox\r\n                                checked={this.state.checked}\r\n                                onChange={this.handleChange}\r\n                                inputProps={{'aria-label': 'primary checkbox'}}\r\n                            />\r\n                        } label=\"Add your company logo for this job post.\"/>\r\n\r\n                    </div>\r\n\r\n\r\n                    <p><span className=\"mandatory\">*Required fields</span></p>\r\n\r\n                    <button\r\n                        type=\"submit\"\r\n                        className=\"btn btn-primary mt-3 mb-4 \">\r\n                        Save\r\n                    </button>\r\n\r\n                    {!this.state.newJobPost && <button\r\n                        type=\"submit\"\r\n                        className=\" btn btn-outline-dark mt-3 mb-4 float-right\"\r\n                        onClick={() => this.onDelete()}>\r\n                        Remove\r\n                    </button>}\r\n\r\n                </form>\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default JobPost;\r\n","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Apply\\Apply.js",["188","189"],"import \"./Apply.css\"\r\nimport React, {Component} from 'react';\r\nimport {AuthServiceFactory} from \"../../services/authService\";\r\nimport {getInstance} from \"../../helpers/httpInstance\";\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport picImage from '../../images/Unknown_person.jpg';\r\n\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\nimport {AppContext, AUTH_TYPE_JOB_SEEKER} from \"../../AppContext\";\r\n\r\n\r\nconst http = getInstance();\r\n\r\nconst useStyles = (theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    backButton: {\r\n        marginRight: theme.spacing(1),\r\n    }\r\n});\r\n\r\nclass Apply extends Component {\r\n    static contextType = AppContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            currentRecruiter: null,\r\n            applyForm: {\r\n                email: '',\r\n                phone: '',\r\n                resume: null\r\n            },\r\n            fileToUpload: null,\r\n            uploadedFile: null,\r\n            nextStep: false,\r\n            steps: null,\r\n            changeResume: false\r\n        }\r\n        this.uploadImg = React.createRef();\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n\r\n        const user = AuthServiceFactory.getInstance().getCurrentUser();\r\n        const url = `/users/${user._id}`;\r\n\r\n        await http.get(url).then(({data}) => {\r\n\r\n            this.setState({user: data, currentRecruiter: this.props.currentRecruiter, steps: this.getSteps()});\r\n            this.handleFormChange({\r\n                email: data.email,\r\n                phone: data.phone,\r\n                firstname: data.firstname,\r\n                lastname: data.lastname,\r\n                resume: data.resume || null\r\n            });\r\n\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n    }\r\n\r\n    handleFormChange = async (newValue) => {\r\n\r\n        const oldForm = {...this.state.applyForm}; // Deep Copy of the profile field\r\n        const newApplyForm = {...oldForm, ...newValue};\r\n        await this.setState({applyForm: newApplyForm})\r\n\r\n    }\r\n\r\n\r\n    handleResumeChange = async (event) => {\r\n\r\n        // Get File Infos\r\n        const fileToUpload = event.target.files[0];\r\n        this.setState({fileToUpload, changeResume: true});\r\n        await this.uploadFile(fileToUpload);\r\n    }\r\n\r\n    setResume = async () => {\r\n\r\n\r\n        const oldUser = {...this.state.user};\r\n        const userRecord = {...oldUser, resume: this.state.user.resume};\r\n        await this.setState({user: userRecord});\r\n        await this.onSaveInfo(this.state.user);\r\n        await this.uploadFile(this.state.fileToUpload);\r\n\r\n\r\n    }\r\n\r\n    onSaveInfo = async (user) => {\r\n\r\n        const url = '/users';\r\n        await http.put(url, user).then(response => {\r\n            this.setState({user: response.data});\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n\r\n        await this.context.setContext({currentUser: this.state.user});\r\n\r\n\r\n    }\r\n\r\n    uploadFile = async (fileToUpload) => {\r\n\r\n        if (!fileToUpload) {\r\n            return null; // Not file to upload\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append(\r\n            \"resume\",\r\n            fileToUpload,\r\n            fileToUpload.name\r\n        );\r\n\r\n        const url = '/uploadResume';\r\n        await http.post(url, formData).then(({data}) => {\r\n\r\n            this.handleFormChange({resume: data.link});\r\n\r\n\r\n            const newUser = {...this.state.user};\r\n            newUser.resume = data.link;\r\n            this.setState({user: newUser});\r\n\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n    }\r\n    handleSubmit = async (e) => {\r\n\r\n        e.preventDefault();\r\n        await this.setResume();\r\n\r\n        if (this.state.currentStep === 1) {\r\n            this.setState({currentStep: 2});\r\n            return;\r\n        }\r\n\r\n\r\n        const url = \"/users/sendFormToUser\";\r\n        const data = {...this.state.applyForm, emailDest: this.state.currentRecruiter.email};\r\n\r\n        await http.post(url, data).then((response) => {\r\n            if (response.data.status === \"sent\") {\r\n                this.setState({fileToUpload: null, changeResume: false});\r\n            } else if (response.data.status === \"failed\") {\r\n                console.log(response.data.status);\r\n            }\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n        this.props.onSubmit();\r\n    }\r\n\r\n    handleCurrentStep = (e) => {\r\n\r\n        e.preventDefault();\r\n        this.setState({nextStep: !this.state.nextStep});\r\n    }\r\n\r\n    getSteps() {\r\n        return ['Add your contact information', 'Add your resume'];\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        const {user, applyForm, fileToUpload, nextStep, steps, changeResume} = this.state;\r\n        if (!user) {\r\n            return null;\r\n        }\r\n        const imgSrc = user?.picture ? `${user?.picture}` : picImage;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className={classes.root} id=\"stepper\">\r\n                    <Stepper activeStep={nextStep ? 1 : 0} alternativeLabel>\r\n                        {steps.map((label) => (\r\n                            <Step key={label}>\r\n                                <StepLabel>{label}</StepLabel>\r\n                            </Step>\r\n                        ))}\r\n                    </Stepper>\r\n                </div>\r\n\r\n                <form onSubmit={this.handleSubmit}>\r\n\r\n                    {!nextStep ?\r\n                        <div>\r\n                            <h5>Contact Info</h5>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-3 pb-4\">\r\n                                    <img className=\"pic-jobseeker-apply\" src={imgSrc} alt=\"profile picture\"/>\r\n                                </div>\r\n                                <div className=\"col p-0 pt-4\">\r\n                                    <div className=\"\"><h6\r\n                                        className=\"apply-name-contact\">{user.firstname} {user.lastname}</h6>\r\n                                        <p className=\"apply-city-contact\">{user.city}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <div className=\"form-group\">\r\n                                        <label>Email address*</label>\r\n                                        <input type=\"email\" className=\"form-control form-control-sm input-apply\"\r\n                                               required\r\n                                               value={applyForm.email}\r\n                                               onChange={e => this.handleFormChange({email: e.target.value})}/>\r\n                                        <small className=\"form-text text-muted\">We'll never share your email with\r\n                                            anyone else.</small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <label>Phone number</label>\r\n                                    <input type=\"text\"\r\n                                           required\r\n                                           value={applyForm.phone}\r\n                                           className=\"form-control input-apply \"\r\n                                           onChange={e => this.handleFormChange({phone: e.target.value})}/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"separator-apply\"></div>\r\n                            <button type=\"button\" className=\"btn float-right button-apply\"\r\n                                    onClick={this.handleCurrentStep}>Next\r\n                                <ArrowForwardIosIcon fontSize=\"small\"></ArrowForwardIosIcon>\r\n                            </button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            <div className=\"row mt-3\">\r\n                                <div className=\"col\">\r\n                                    <h5>Resume</h5>\r\n                                    <p className=\"form-text text-muted mb-1\">Please include a resume.</p>\r\n                                    <label className=\"label-upload mb-0 mr-2\" htmlFor=\"actual-btn\">Upload resume\r\n                                        <i className=\"pl-2 fa fa-upload \"></i>\r\n                                    </label>\r\n                                    <input type=\"file\"\r\n                                           ref={this.uploadImg}\r\n                                           className=\"form-control \"\r\n                                           id=\"actual-btn\"\r\n                                           name=\"avatar\"\r\n                                           hidden\r\n                                           onChange={this.handleResumeChange}/>\r\n\r\n\r\n                                    {fileToUpload && <span>{fileToUpload.name}</span>}\r\n                                    {user?.resume && !changeResume && <div className=\"pdf_icon\">\r\n                                        <PictureAsPdfIcon className=\"mr-1\" color=\"action\"/>my resume</div>\r\n                                    }\r\n\r\n                                    <small className=\"form-text text-muted \">DOC, DOCX, PDF</small>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n                            <div className=\"pt-5\">\r\n                                <div className=\"separator-apply\"></div>\r\n                                <button type=\"button\" className=\"btn btn-link button-back\"\r\n                                        onClick={this.handleCurrentStep}>\r\n                                    Back\r\n                                </button>\r\n                                <button type=\"submit\" className=\"btn btn-link button-apply float-right \">\r\n                                    Submit\r\n                                    <ArrowForwardIosIcon fontSize=\"small\">\r\n                                    </ArrowForwardIosIcon></button>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </form>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default withStyles(useStyles)(Apply)\r\n\r\n","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\SearchBar\\SearchBar.js",["190","191"],"import Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport {debounce} from \"lodash\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport axios from \"axios\";\r\nimport React, {  useState } from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport './SearchBar.css';\r\nimport {createFilterOptions} from \"@material-ui/lab\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n\r\n    input: {\r\n        marginLeft: theme.spacing(1),\r\n        flex: 1,\r\n\r\n    },\r\n    iconButton: {\r\n        padding: 10,\r\n    },\r\n}));\r\n\r\nconst filterOptions = createFilterOptions({\r\n    limit: 8,\r\n});\r\n\r\nfunction SearchBar(props) {\r\n\r\n    const classes = useStyles();\r\n    const [jobs, setJobs] = useState([]);\r\n\r\n\r\n    const onKeyUp =  (event) => {\r\n        if (event.charCode === 13) {\r\n            setJobs([]);\r\n            props.search(event.target.value);\r\n        }\r\n    }\r\n\r\n    const onBlur = (event) => {\r\n        setJobs([]);\r\n        props.search(event.target.value);\r\n    }\r\n\r\n    const searchJob =  (e, newValue) => {\r\n\r\n        const url = `http://api.dataatwork.org/v1/jobs/autocomplete`;\r\n         axios.get(url, {params: {contains: newValue}}).then(response => {\r\n             setJobs( response?.data?.map(j => j.suggestion) || [])\r\n\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n\r\n        });\r\n    }\r\n    return (\r\n        <Paper  className={classes.root} onKeyPress={onKeyUp}>\r\n            <IconButton className={classes.iconButton} aria-label=\"menu\">\r\n                <SearchIcon />\r\n            </IconButton>\r\n            <Autocomplete\r\n                id=\"custom-input-demo\"\r\n                fullWidth={true}\r\n                className={classes.input}\r\n                filterOptions={filterOptions}\r\n                options={jobs}\r\n                freeSolo={true}\r\n                onBlur={onBlur}\r\n                onInputChange={((event, value) => searchJob(event, value))}\r\n                renderInput={(params) => (\r\n                    <div className={'search-bar'}>\r\n                        <TextField   placeholder=\"Search by title\"\r\n                                   type=\"text\" {...params}  />\r\n                    </div>\r\n                )}\r\n            />\r\n        </Paper>\r\n\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default SearchBar;\r\n","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\ContactInfos\\ContactInfo.js",["192"],"import React from \"react\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport {AppContext, AUTH_TYPE_RECRUITER} from \"../../../AppContext\";\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\nimport \"./ContactInfo.css\"\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport {v4 as uuid} from \"uuid\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport ChangePersonalInfos from \"../UserProfile/ChangePersonalInfos/ChangePersonalInfos\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {getInstance} from \"../../../helpers/httpInstance\";\r\nconst http = getInstance();\r\n\r\n\r\nconst {Component} = require(\"react\");\r\n\r\n\r\nclass ContactInfo extends Component {\r\n    static contextType = AppContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            onChangeContactInfo: false,\r\n            isMyProfile: true\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        let user =  this.context.context.currentUser;\r\n        if(this.context.context.userType === AUTH_TYPE_RECRUITER){\r\n            this.setState({user: this.props.user, isMyProfile: false});\r\n        }\r\n\r\n        else{\r\n            const url = `/users/${user._id}`;\r\n            http.get(url).then(response => {\r\n                this.setState({user: response.data});\r\n\r\n            }).catch(error => {\r\n                console.log(error?.response?.data);\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    onChangeContactInfo = async () => {\r\n        await this.setState({onChangeContactInfo: true});\r\n    }\r\n\r\n    onCloseWindow = async () => {\r\n        await this.setState({onChangeContactInfo: false});\r\n\r\n    }\r\n\r\n    onSubmitInfo = async (user) => {\r\n\r\n        this.setState({user: user});\r\n        this.props.onSubmit(user);\r\n        await this.onCloseWindow();\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const {user, onChangeContactInfo, isMyProfile} = this.state;\r\n        if(!user)\r\n            return null;\r\n\r\n\r\n        return (\r\n            <div className=\"container \">\r\n\r\n                <DialogTitle id=\"form-dialog-title\" className=\"pb-3\">\r\n                    <h4>{user.firstname} {user.lastname}</h4>\r\n                    <hr/>\r\n                    {isMyProfile && <IconButton className=\"edit-contact-info pt-0\">\r\n                        <EditIcon color=\"action\"\r\n                                  onClick={this.onChangeContactInfo}/>\r\n                    </IconButton>}\r\n                    <h5>Contact Info</h5>\r\n\r\n                </DialogTitle>\r\n\r\n\r\n                {user.websites.length !== 0 && <section className=\"pl-4 pb-2\">\r\n                    <div className=\"row\">\r\n                        <LinkIcon/>\r\n                        <header className=\"ml-2 font-weight-bold pb-1\">Websites</header>\r\n                    </div>\r\n                    {user.websites.map((url) => {\r\n                        return (\r\n                            <div key={uuid()} className=\"row pl-4\">\r\n                                <a className=\"ml-1\" href={`${url}`} target=\"_blank\">{url}</a>\r\n                            </div>\r\n                        )\r\n                    })}\r\n\r\n                </section>}\r\n\r\n                <section className=\"pl-4 py-2\">\r\n                    <div className=\"row\">\r\n                        <MailOutlineIcon/>\r\n                        <header className=\"ml-2 font-weight-bold pb-1\">Email</header>\r\n                    </div>\r\n                    <div className=\"row pl-4 pb-2\">\r\n                        <a href={`mailto:${user.email}`}>{user.email}</a>\r\n                    </div>\r\n                </section>\r\n\r\n\r\n                {user.phone && <section className=\"pl-4 pb-2\">\r\n                    <div className=\"row\">\r\n                        <PhoneIcon/>\r\n                        <header className=\"ml-2 font-weight-bold pb-1\">Phone</header>\r\n                    </div>\r\n                    <div className=\"row pl-4\">\r\n                        <p>{user.phone}</p>\r\n                    </div>\r\n                </section>}\r\n\r\n                {user.address && <section className=\"pl-4 pb-2\">\r\n                    <div className=\"row\">\r\n                        <RoomIcon/>\r\n                        <header className=\"ml-2 font-weight-bold pb-1\">Address</header>\r\n                    </div>\r\n                    <div className=\"row pl-4\">\r\n                        <p>{user.address}</p>\r\n                    </div>\r\n                </section>}\r\n\r\n                <Dialog open={onChangeContactInfo}\r\n                        onClose={this.onCloseWindow}\r\n                        aria-labelledby=\"form-dialog-title\">\r\n                    <DialogContent>\r\n                        <button type=\"button\" className=\"close\" aria-label=\"Close\"\r\n                                onClick={this.onCloseWindow}>\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                        <ChangePersonalInfos user={user}\r\n                                             onEdit={this.onSubmitInfo}\r\n                        />\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactInfo;\r\n","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Loader.jsx",[],"C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Register\\SetUserRole.js",["193","194","195"],"import React, {useContext} from 'react';\r\nimport \"../Login/LoginManager.css\";\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport {useHistory, withRouter} from \"react-router\"\r\nimport Button from '@material-ui/core/Button';\r\nimport {Avatar, Grid, Paper} from \"@material-ui/core\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport {AppContext, AUTH_TYPE_JOB_SEEKER, AUTH_TYPE_RECRUITER} from \"../../AppContext\";\r\n\r\nexport default function SetUserRole() {\r\n\r\n    const {context, setContext} = useContext(AppContext);\r\n    const history = useHistory();\r\n\r\n    const [value, setValue] = React.useState('');\r\n    const [error, setError] = React.useState(false);\r\n    const [helperText, setHelperText] = React.useState('');\r\n\r\n    const handleRadioChange = (event) => {\r\n        setValue(event.target.value);\r\n        setHelperText('');\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (value === 'job seeker') {\r\n            setContext({userType: AUTH_TYPE_JOB_SEEKER})\r\n            history.push('/register');\r\n        } else if (value === 'recruiter') {\r\n            setContext({userType: AUTH_TYPE_RECRUITER})\r\n            history.push('/register');\r\n        } else {\r\n            setError(true);\r\n            setHelperText('Please select an option.');\r\n        }\r\n    };\r\n\r\n    return (\r\n\r\n        <div className=\"form-container\">\r\n\r\n            <Grid>\r\n                <Paper elevation={10} id=\"paper-status\">\r\n                    <Grid align=\"center\">\r\n                        <Avatar id=\"avatar\"><LockOutlinedIcon/></Avatar>\r\n                        <h2 className=\"b-mt-1\">Register </h2>\r\n                        <h5 className=\"mb-1\">I am a...</h5>\r\n                        {error && <FormHelperText className=\"text-center helper-text\">{helperText}</FormHelperText>}\r\n\r\n\r\n                    </Grid>\r\n                    <form onSubmit={handleSubmit} >\r\n\r\n                        <FormControl component=\"fieldset\">\r\n\r\n\r\n                            <RadioGroup aria-label=\"quiz\" name=\"quiz\" value={value} onChange={handleRadioChange}>\r\n                                <FormControlLabel value=\"job seeker\" control={<Radio/>} label=\"Job seeker\"/>\r\n                                <FormControlLabel value=\"recruiter\" control={<Radio/>} label=\"Recruiter\"/>\r\n                            </RadioGroup>\r\n\r\n\r\n\r\n\r\n                        </FormControl>\r\n\r\n                        <div className=\"text-center w-100\">\r\n                            <Button className=\"btn-setRole\" type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                                Next\r\n                            </Button>\r\n                        </div>\r\n                    </form>\r\n                </Paper>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Login\\ChangePassword.js",["196","197","198"],"import React, {useContext, useState} from 'react';\r\nimport \"../Login/LoginManager.css\";\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport {useHistory} from \"react-router\"\r\nimport Button from '@material-ui/core/Button';\r\nimport {Avatar, Grid, Paper, TextField} from \"@material-ui/core\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport {AppContext} from \"../../AppContext\";\r\nimport {getInstance} from \"../../helpers/httpInstance\";\r\n\r\nconst http = getInstance();\r\n\r\nexport default function ChangePassword() {\r\n\r\n    const {context, setContext} = useContext(AppContext);\r\n    const history = useHistory();\r\n\r\n    const [password, setPassword] = useState(null);\r\n    const [email, setEmail] = useState(null);\r\n    const [userId, setUserId] = useState('');\r\n    const [code, setCode] = useState(null);\r\n    const [step, setStep] = useState(1);\r\n    const [error, setError] = React.useState(false);\r\n    const [helperText, setHelperText] = React.useState('');\r\n\r\n    const onPasswordChange = (newValue) => {\r\n        const pwd = password;\r\n        const newPwd = {...pwd, ...newValue}\r\n        setPassword(newPwd);\r\n\r\n    }\r\n\r\n\r\n    const onEmail = (newValue) => {\r\n        setEmail(newValue);\r\n    }\r\n    const onCode = (newValue) => {\r\n        setCode(newValue);\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        switch (step) {\r\n            case 1:\r\n                getUser();\r\n                break;\r\n            case 2:\r\n                checkCode();\r\n                break;\r\n            case 3:\r\n                changePassword();\r\n                break;\r\n\r\n            default:\r\n        }\r\n    }\r\n    const getUser = async () => {\r\n\r\n        try {\r\n            const url = `users/resetPassword/${email}`;\r\n            const {data} = await http.get(url);\r\n            setUserId(data);\r\n            await setErrorText(false, \"\");\r\n            setStep(2);\r\n\r\n\r\n        } catch (e) {\r\n            await setErrorText(true, e?.response?.data);\r\n\r\n        }\r\n    }\r\n\r\n    const checkCode = async () => {\r\n        try {\r\n            const url = `users/codeVerification/${code}`;\r\n            await http.get(url);\r\n            await setErrorText(false, \"\");\r\n            setStep(3);\r\n\r\n\r\n        } catch (e) {\r\n            await setErrorText(true, e?.response?.data);\r\n\r\n        }\r\n    }\r\n\r\n    const changePassword = async () => {\r\n        try {\r\n            const url = `users/changePassword/${userId}`;\r\n            await http.post(url, password);\r\n            await setErrorText(false, \"\");\r\n            setStep(4);\r\n\r\n\r\n        } catch (e) {\r\n            await setErrorText(true, e?.response?.data);\r\n\r\n        }\r\n    }\r\n\r\n    const setErrorText = async (isError, text) => {\r\n        setError(isError);\r\n        setHelperText(text);\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"form-container\">\r\n\r\n            <Grid>\r\n                <Paper elevation={10} id=\"paper-status\">\r\n                    <Grid align=\"center\">\r\n                        <Avatar id=\"avatar\"><LockOutlinedIcon/></Avatar>\r\n                        <h2 className=\"mb-3\">Change password </h2>\r\n                        {error && <FormHelperText className=\"text-center helper-text mb-2\">{helperText}</FormHelperText>}\r\n\r\n                        {step === 1 &&\r\n                        <TextField\r\n                            label=\"email\"\r\n                            onChange={e => onEmail(e.target.value)}\r\n                            className=\"input-control label-field\"\r\n                            placeholder=\"enter your email\"\r\n                            type=\"email\"\r\n                            fullWidth\r\n                            required\r\n                        />}\r\n\r\n                        {step === 2 &&\r\n                           <div>\r\n                               <div className=\"text-left mb-2\">\r\n                                   <small>We sent you a verification code. Please enter it to confirm your identity.\r\n                                   </small>\r\n                               </div>\r\n                               <TextField\r\n                                   label=\"code\"\r\n                                   onChange={e => onCode(e.target.value)}\r\n                                   className=\"input-control label-field\"\r\n                                   placeholder=\"enter the code\"\r\n                                   type=\"text\"\r\n                                   fullWidth\r\n                                   required\r\n                               />\r\n                           </div>\r\n\r\n                        }\r\n\r\n                        {step === 3 &&\r\n                        <div>\r\n                            <TextField\r\n                                label=\"Password\"\r\n                                onChange={e => onPasswordChange({newPassword: e.target.value})}\r\n                                className=\"input-control label-field\"\r\n                                placeholder=\"enter your password\"\r\n                                type=\"password\"\r\n                                fullWidth\r\n                                required\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"confirmPassword\"\r\n                                onChange={e => onPasswordChange({confirmPassword: e.target.value})}\r\n                                className=\"input-control label-field\"\r\n                                placeholder=\"confirm your password\"\r\n                                type=\"password\"\r\n                                fullWidth\r\n                                required\r\n                            />\r\n                        </div>\r\n                        }\r\n\r\n                        {step === 4 &&\r\n                        <div className=\"mt-3\"> Password changed !</div>}\r\n\r\n                    </Grid>\r\n                    <form onSubmit={handleSubmit} className=\"ml-auto mr-auto d-table\">\r\n\r\n                        <FormControl component=\"fieldset\">\r\n                            {step !== 4 ?\r\n                                <Button className=\"mt-2 mb-1\" type=\"submit\" variant=\"contained\"\r\n                                        color=\"primary\">\r\n                                    Submit\r\n                                </Button> :\r\n                                <a className=\"mt-3 \" href=\"/login\">\r\n                                    <Button variant=\"contained\"\r\n                                        color=\"primary\">\r\n                                    Sign in\r\n                                </Button>\r\n                                </a>\r\n\r\n                            }\r\n\r\n\r\n                        </FormControl>\r\n                    </form>\r\n                </Paper>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","C:\\Users\\lauri\\Documents\\etudes\\chana 4\\projet final\\code\\client\\src\\components\\Profile\\UserProfile\\ChangePersonalInfos\\ChangePersonalInfos.js",["199"],"import React, {Component} from 'react';\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {debounce} from \"lodash\";\r\nimport axios from \"axios\";\r\nimport {getInstance} from \"../../../../helpers/httpInstance\";\r\nimport \"./ChangePersonalInfos.css\"\r\nimport {v4 as uuid} from \"uuid\";\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst http = getInstance();\r\n\r\nclass ChangePersonalInfos extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            places: [],\r\n            jobs: [],\r\n            onAddWebsite: false,\r\n            websites: [],\r\n            url: null\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {user} = this.props;\r\n        this.setState({user});\r\n        this.setState({websites: user.websites});\r\n\r\n    }\r\n\r\n    loadPlaceOptions = async (newValue) => {\r\n\r\n        const url = '/place';\r\n        await http.get(url, {params: {city: newValue}}).then(response => {\r\n            this.setState({places: response?.data || []})\r\n\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n\r\n        });\r\n    }\r\n\r\n    searchJob = async (newValue) => {\r\n\r\n        const url = `http://api.dataatwork.org/v1/jobs/autocomplete`;\r\n        await axios.get(url, {params: {contains: newValue}}).then(response => {\r\n            this.setState({jobs: response?.data || []})\r\n\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n\r\n        });\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n\r\n        e.preventDefault();\r\n        this.props.onEdit(this.state.user);\r\n    }\r\n\r\n    handleUserChange = (newInfos) => {\r\n\r\n        const oldInfos = {...this.state.user};\r\n        const infos = {...oldInfos, ...newInfos};\r\n        this.setState({user: infos});\r\n\r\n    }\r\n\r\n    handleJobChange = (job) => {\r\n\r\n        const oldInfos = {...this.state.user};\r\n        const infos = {...oldInfos, ...{job: job?.suggestion}};\r\n        this.setState({user: infos});\r\n\r\n        this.getRelatedJobs(job?.uuid);\r\n\r\n    }\r\n\r\n    getRelatedJobs = async (jobId) =>{\r\n\r\n        const url = `http://api.dataatwork.org/v1/jobs/${jobId}/related_jobs`;\r\n        await axios.get(url).then(res => {\r\n            this.handleUserChange({relatedJobs: res?.data?.related_job_titles.map(j => j.title)});\r\n\r\n        }).catch(error => {\r\n            console.log(error?.response?.data);\r\n        });\r\n    }\r\n\r\n    onAddWebsite = () => {\r\n\r\n        this.setState({onAddWebsite: true})\r\n    }\r\n\r\n    AddWebsite = async () => {\r\n\r\n        const arrayUrls = this.state.websites;\r\n        if(this.state.url) {\r\n            await arrayUrls.push(this.state.url);\r\n            await this.handleUserChange( {...this.state.websites});\r\n        }\r\n        await this.closeAddWebsite();\r\n\r\n    }\r\n\r\n    closeAddWebsite = async () => {\r\n        await this.setState({onAddWebsite: false})\r\n\r\n    }\r\n\r\n    handleAddWebsite = async (newUrl) => {\r\n        await this.setState({url: newUrl});\r\n    }\r\n\r\n    onDeleteWebsite = async (url) => {\r\n\r\n        const arrayUrls = this.state.websites;\r\n        const index = arrayUrls.indexOf(url);\r\n        if (index > -1) {\r\n            await arrayUrls.splice(index, 1);\r\n        }\r\n        const websites = {...this.state.websites};\r\n        this.handleUserChange(websites);\r\n    }\r\n\r\n\r\n    render() {\r\n        const {user, onAddWebsite, websites} = this.state;\r\n\r\n        if (!user) {\r\n            return null;\r\n        }\r\n\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <DialogTitle id=\"form-dialog-title\">\r\n                    <p className=\"text-center pb-3\">Change Information</p>\r\n                </DialogTitle>\r\n\r\n                <form action=\"\" onSubmit={this.onSubmit}>\r\n                    <label className=\"label-contact\">First name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        onChange={e => this.handleUserChange({firstname: e.target.value})}\r\n                        className=\"form-control\"\r\n                        placeholder=\"first name\"\r\n                        value={user.firstname}\r\n                        required\r\n                    />\r\n                    <label className=\"label-contact\">Last name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        onChange={e => this.handleUserChange({lastname: e.target.value})}\r\n                        className=\"form-control\"\r\n                        placeholder=\"last name\"\r\n                        value={user.lastname}\r\n                        required\r\n                    />\r\n\r\n                    <label className=\"label-contact\">Email</label>\r\n                    <input\r\n                        type=\"email\"\r\n                        onChange={e => this.handleUserChange({email: e.target.value})}\r\n                        className=\"form-control\"\r\n                        placeholder=\"Email\"\r\n                        value={user.email}\r\n                    />\r\n                    <label className=\"label-contact\">Phone number</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        onChange={e => this.handleUserChange({phone: e.target.value})}\r\n                        className=\"form-control\"\r\n                        placeholder=\"phone\"\r\n                        value={user.phone}\r\n                    />\r\n\r\n                    <label className=\"label-contact\">Address</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        onChange={e => this.handleUserChange({address: e.target.value})}\r\n                        className=\"form-control\"\r\n                        placeholder=\"Address\"\r\n                        value={user.address}\r\n\r\n                    />\r\n                    <label className=\"label-contact\">Job</label>\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        className=\"location-autocomplete\"\r\n                        options={this.state.jobs}\r\n                        getOptionLabel={option => option.suggestion || option}\r\n                        fullWidth\r\n                        freeSolo\r\n                        value={user.job}\r\n                        onInputChange={debounce((event, value) => this.searchJob(value), 300)}\r\n                        onChange={(e, value) => this.handleJobChange(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField  {...params} className=\"location-title\"\r\n                                        variant=\"outlined\" />\r\n                        )}\r\n\r\n                    />\r\n\r\n\r\n                    <label className=\"label-contact\">City</label>\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        className=\"location-autocomplete\"\r\n                        options={this.state.places}\r\n                        fullWidth\r\n                        freeSolo\r\n                        value={user.city}\r\n                        onInputChange={(event, value) => this.loadPlaceOptions(value)}\r\n                        onChange={(event, value) => this.handleUserChange({city: value})}\r\n                        renderInput={(params) => (\r\n                            <TextField  {...params} className=\"location-title\"\r\n                                        variant=\"outlined\"/>\r\n                        )}\r\n\r\n                    />\r\n\r\n\r\n                    <h5>Websites</h5>\r\n                    {websites && websites.map((url) => {\r\n                        return (\r\n                            <div key={uuid()} className=\"p-0 m-0\">\r\n                                <LinkIcon color=\"primary\" fontSize=\"small\"/><a className=\"m-0 p-0 ml-1\"\r\n                                                                              href={`${url}`}>{url}</a>\r\n                                <IconButton className=\"ml-2 \"  onClick={() => this.onDeleteWebsite(url)}>\r\n                                    <DeleteIcon  fontSize=\"small\" color=\"action\"\r\n                                    />\r\n                                </IconButton>\r\n\r\n                            </div>\r\n                        )\r\n                    })}\r\n                    <a href=\"#\" className=\"p-0 mt-2 d-flex\"\r\n                            onClick={this.onAddWebsite}><AddIcon color=\"primary\"/> Add website\r\n                    </a>\r\n\r\n\r\n                    {onAddWebsite && <input\r\n                        type=\"text\"\r\n                        onChange={e => this.handleAddWebsite(e.target.value)}\r\n                        className=\"form-control mt-3\"\r\n                        placeholder=\"url\"\r\n                    />}\r\n\r\n                    <button\r\n                        type=\"submit\"\r\n                        onClick={()=> this.AddWebsite()}\r\n                        className=\"btn btn-primary  save-change-btn \">\r\n                        Save\r\n                    </button>\r\n\r\n                </form>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ChangePersonalInfos;\r\n\r\n",["200","201"],{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","severity":1,"message":"207","line":11,"column":21,"nodeType":"208","messageId":"209","endLine":11,"endColumn":41},{"ruleId":"206","severity":1,"message":"210","line":1,"column":9,"nodeType":"208","messageId":"209","endLine":1,"endColumn":17},{"ruleId":"211","severity":1,"message":"212","line":51,"column":66,"nodeType":"213","endLine":51,"endColumn":83},{"ruleId":"206","severity":1,"message":"214","line":29,"column":16,"nodeType":"208","messageId":"209","endLine":29,"endColumn":27},{"ruleId":"206","severity":1,"message":"215","line":29,"column":29,"nodeType":"208","messageId":"209","endLine":29,"endColumn":37},{"ruleId":"216","severity":1,"message":"217","line":178,"column":45,"nodeType":"213","endLine":180,"endColumn":73},{"ruleId":"216","severity":1,"message":"217","line":181,"column":45,"nodeType":"213","endLine":181,"endColumn":119},{"ruleId":"206","severity":1,"message":"218","line":7,"column":21,"nodeType":"208","messageId":"209","endLine":7,"endColumn":31},{"ruleId":"206","severity":1,"message":"219","line":8,"column":43,"nodeType":"208","messageId":"209","endLine":8,"endColumn":62},{"ruleId":"220","severity":1,"message":"221","line":98,"column":41,"nodeType":"213","endLine":102,"endColumn":72},{"ruleId":"220","severity":1,"message":"221","line":107,"column":41,"nodeType":"213","endLine":110,"endColumn":73},{"ruleId":"206","severity":1,"message":"222","line":1,"column":16,"nodeType":"208","messageId":"209","endLine":1,"endColumn":24},{"ruleId":"206","severity":1,"message":"210","line":2,"column":9,"nodeType":"208","messageId":"209","endLine":2,"endColumn":17},{"ruleId":"211","severity":1,"message":"212","line":22,"column":37,"nodeType":"213","endLine":22,"endColumn":54},{"ruleId":"216","severity":1,"message":"217","line":79,"column":29,"nodeType":"213","endLine":79,"endColumn":99},{"ruleId":"206","severity":1,"message":"214","line":36,"column":16,"nodeType":"208","messageId":"209","endLine":36,"endColumn":27},{"ruleId":"206","severity":1,"message":"215","line":36,"column":29,"nodeType":"208","messageId":"209","endLine":36,"endColumn":37},{"ruleId":"206","severity":1,"message":"215","line":111,"column":29,"nodeType":"208","messageId":"209","endLine":111,"endColumn":37},{"ruleId":"223","severity":1,"message":"224","line":182,"column":49,"nodeType":"213","endLine":183,"endColumn":68},{"ruleId":"223","severity":1,"message":"224","line":213,"column":45,"nodeType":"213","endLine":214,"endColumn":64},{"ruleId":"223","severity":1,"message":"224","line":222,"column":68,"nodeType":"213","endLine":222,"endColumn":113},{"ruleId":"220","severity":1,"message":"221","line":231,"column":49,"nodeType":"213","endLine":231,"endColumn":52},{"ruleId":"216","severity":1,"message":"217","line":321,"column":37,"nodeType":"213","endLine":321,"endColumn":118},{"ruleId":"216","severity":1,"message":"217","line":322,"column":41,"nodeType":"213","endLine":322,"endColumn":117},{"ruleId":"220","severity":1,"message":"225","line":335,"column":37,"nodeType":"213","endLine":336,"endColumn":74},{"ruleId":"223","severity":1,"message":"224","line":411,"column":83,"nodeType":"213","endLine":412,"endColumn":102},{"ruleId":"223","severity":1,"message":"224","line":456,"column":83,"nodeType":"213","endLine":457,"endColumn":102},{"ruleId":"206","severity":1,"message":"222","line":1,"column":27,"nodeType":"208","messageId":"209","endLine":1,"endColumn":35},{"ruleId":"206","severity":1,"message":"226","line":17,"column":21,"nodeType":"208","messageId":"209","endLine":17,"endColumn":40},{"ruleId":"206","severity":1,"message":"227","line":160,"column":44,"nodeType":"208","messageId":"209","endLine":160,"endColumn":55},{"ruleId":"223","severity":1,"message":"224","line":247,"column":42,"nodeType":"213","endLine":247,"endColumn":91},{"ruleId":"216","severity":1,"message":"217","line":248,"column":45,"nodeType":"213","endLine":249,"endColumn":73},{"ruleId":"223","severity":1,"message":"224","line":260,"column":41,"nodeType":"213","endLine":260,"endColumn":90},{"ruleId":"216","severity":1,"message":"217","line":293,"column":65,"nodeType":"213","endLine":294,"endColumn":93},{"ruleId":"216","severity":1,"message":"217","line":295,"column":65,"nodeType":"213","endLine":296,"endColumn":93},{"ruleId":"216","severity":1,"message":"217","line":367,"column":59,"nodeType":"213","endLine":368,"endColumn":111},{"ruleId":"216","severity":1,"message":"217","line":369,"column":33,"nodeType":"213","endLine":370,"endColumn":78},{"ruleId":"223","severity":1,"message":"224","line":377,"column":65,"nodeType":"213","endLine":378,"endColumn":84},{"ruleId":"216","severity":1,"message":"217","line":429,"column":37,"nodeType":"213","endLine":429,"endColumn":102},{"ruleId":"216","severity":1,"message":"217","line":430,"column":37,"nodeType":"213","endLine":430,"endColumn":113},{"ruleId":"228","severity":1,"message":"229","line":442,"column":83,"nodeType":"230","endLine":442,"endColumn":105},{"ruleId":"206","severity":1,"message":"231","line":1,"column":16,"nodeType":"208","messageId":"209","endLine":1,"endColumn":29},{"ruleId":"206","severity":1,"message":"222","line":1,"column":27,"nodeType":"208","messageId":"209","endLine":1,"endColumn":35},{"ruleId":"206","severity":1,"message":"232","line":4,"column":8,"nodeType":"208","messageId":"209","endLine":4,"endColumn":21},{"ruleId":"206","severity":1,"message":"207","line":13,"column":21,"nodeType":"208","messageId":"209","endLine":13,"endColumn":41},{"ruleId":"216","severity":1,"message":"217","line":204,"column":37,"nodeType":"213","endLine":204,"endColumn":110},{"ruleId":"206","severity":1,"message":"233","line":2,"column":9,"nodeType":"208","messageId":"209","endLine":2,"endColumn":17},{"ruleId":"206","severity":1,"message":"234","line":7,"column":8,"nodeType":"208","messageId":"209","endLine":7,"endColumn":17},{"ruleId":"223","severity":1,"message":"224","line":104,"column":33,"nodeType":"213","endLine":104,"endColumn":85},{"ruleId":"206","severity":1,"message":"235","line":8,"column":8,"nodeType":"208","messageId":"209","endLine":8,"endColumn":17},{"ruleId":"206","severity":1,"message":"218","line":9,"column":21,"nodeType":"208","messageId":"209","endLine":9,"endColumn":31},{"ruleId":"206","severity":1,"message":"236","line":17,"column":12,"nodeType":"208","messageId":"209","endLine":17,"endColumn":19},{"ruleId":"206","severity":1,"message":"236","line":16,"column":12,"nodeType":"208","messageId":"209","endLine":16,"endColumn":19},{"ruleId":"206","severity":1,"message":"237","line":16,"column":21,"nodeType":"208","messageId":"209","endLine":16,"endColumn":31},{"ruleId":"206","severity":1,"message":"238","line":17,"column":11,"nodeType":"208","messageId":"209","endLine":17,"endColumn":18},{"ruleId":"220","severity":1,"message":"225","line":246,"column":21,"nodeType":"213","endLine":247,"endColumn":57},{"ruleId":"202","replacedBy":"239"},{"ruleId":"204","replacedBy":"240"},"no-native-reassign",["241"],"no-negated-in-lhs",["242"],"no-unused-vars","'AUTH_TYPE_JOB_SEEKER' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'currentUser' is assigned a value but never used.","'userType' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'withRouter' is defined but never used.","'AUTH_TYPE_RECRUITER' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useState' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'defaultContextValue' is defined but never used.","'isMyProfile' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'AxiosInstance' is defined but never used.","'DialogContent' is defined but never used.","'debounce' is defined but never used.","'InputBase' is defined but never used.","'FormLabel' is defined but never used.","'context' is assigned a value but never used.","'setContext' is assigned a value but never used.","'history' is assigned a value but never used.",["241"],["242"],"no-global-assign","no-unsafe-negation"]